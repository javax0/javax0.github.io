<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://javax0.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://javax0.github.io/" rel="alternate" type="text/html" /><updated>2024-10-21T14:17:59+02:00</updated><id>https://javax0.github.io/feed.xml</id><title type="html">Java Deep, mostly Java</title><subtitle>javax0 is a technical Java oriented blog. Whenever I find something interesting, in the mood and feel the power to publish it, you will get it here. Publications are usually released on Wednesday 15:00am GMT. Earlier posts of the blog were published on Javax0 Wordpress Site at https://javax0.wordpress.com</subtitle><entry><title type="html">Mixing Documentation to Code and REST APIs</title><link href="https://javax0.github.io/2024/10/09/documenting-openapi.html" rel="alternate" type="text/html" title="Mixing Documentation to Code and REST APIs" /><published>2024-10-09T00:00:00+02:00</published><updated>2024-10-09T00:00:00+02:00</updated><id>https://javax0.github.io/2024/10/09/documenting-openapi</id><content type="html" xml:base="https://javax0.github.io/2024/10/09/documenting-openapi.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is an ongoing debate among people focusing on software documentation about the best way to document an API.
One approach suggests that you create the document first, and then the developers develop the code to implement the definitions.
The other approach proposes using the source code as documentation by extending it with special comments used to generate human-readable documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will discuss the pros and cons of both approaches, and then I will suggest a middle ground, allowing you to move as many documentation fragments into the code as you prefer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-should-apis-be-documented-with-code&quot;&gt;2. Should APIs be documented with code?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we talk about embedding documentation in the code, we refer to text used to generate the product.
A software product is a set of text files that undergo different transformations, resulting in:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;an executable environment, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;human-consumable documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first one includes the machine code, the configuration of the environment, and generally everything technically needed to have functioning software.
The second is necessary to empower users to utilize the software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-1-separate-documentation-and-source&quot;&gt;2.1. Separate Documentation and Source&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/2024-10-09-01.png&quot; alt=&quot;2024 10 09 01&quot; width=&quot;60%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Separate Documentation and Source&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some of the text files in the software product are used to generate the executable environment, while others are part of the documentation.
Historically, these two sets have been separate and maintained by different people: software developers and documentarians.
The text files used to create the executable are called program source code, or source for short, while the others are called documentation.
These two types of files have different traits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source code is formal, usually written in a programming language, consumed by programs, and it must be precise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documentation is written for human readers, using natural language, and it must focus on clarity, simplicity, and usability more than precision.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One could say that documentation is the code executed by human &quot;processors&quot; to operate and use the code executed by machine processors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Humans can handle errors in their input and interpret the documentation intelligently.
If there is a typo, slight inconsistency, or deviation from the actual product, the documentation may still be usable.
Humans can interpret, understand, and use imperfect documentation.
This does not mean that documentation with errors is acceptable.
It simply means that, while it may be usable with some errors, you should still strive to avoid errors, of course.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-2-mixing-documentation-and-source&quot;&gt;2.2. Mixing Documentation and Source&lt;/h3&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/2024-10-09-02.png&quot; alt=&quot;2024 10 09 02&quot; width=&quot;60%&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 2. Mixed Documentation and Source&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Modern applications mix documentation with the source to some extent.
There are clear advantages to doing this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source contains information that the documentation can rely on.
Why manually write something into a separate document, risking inconsistency when it is already in the source?
Automatically extracting the information from the source code and transforming it into a human-readable document should be cheaper than manually following changes in the source and mirroring them in the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Part of the documentation is strongly tied to the code and is maintained by the developers.
It is logical to tie the documentation to the code by placing them in the same text file.
It is less likely that you will skip updating the related document for a changing code when the document text is in the same place, in the same file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are also drawbacks to mixing documentation with the source code.
Documentarians are not necessarily developers.
It may be a barrier to edit a text within a source file, as this is part of the code.
It may require specialized skills and privileges to modify the source code, even if only the documentation part is being changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It also introduces a new possibility for documentation processing: failure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Conventional documentation is a simple conversion process that rarely fails.
You export the document to PDF or another output format.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using a textual document, the conversion may signal an error if there are errors in the markup.
Luckily, documentarians have become accustomed to markup languages and to the possibility of such errors.
Using markup instead of WYSIWYG editors is becoming a no-brainer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the document is partially in the source code, the situation becomes more complex.
The conversion may fail due to inconsistencies between the documentation and the code.
The documentarian must understand the code to fix the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this can be a barrier to overcome, you can also view it as an advantage.
It can provide a semantic check on the documentation, which was previously only possible through manual reviews.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-3-mixed-parts&quot;&gt;2.3. Mixed Parts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we talk about source code as part of the documentation, we can separate three different parts of the text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;One part is pure documentation included in the source code, denoted in blue in the diagram &lt;em&gt;&quot;Mixed Documentation and Source.&quot;&lt;/em&gt;
If there is any change in this text, typically a comment, the code will still produce the same executable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The second part is actual source code used by the documentation.
It is denoted in red.
This part is the actual code that gets into the executable but also affects the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The third part is represented by the blue striped area, representing the source affecting the documentation but not the executable.
This part of the documentation is meta-information that helps the documentation generator create the human-readable documentation from the source code.
It is usually a comment from the program&amp;#8217;s point of view.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-4-simple-examples-of-mixing&quot;&gt;2.4. Simple Examples of Mixing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most well-known examples of mixing documentation and source code are JavaDoc and Doxygen.
Less known, but the earliest such application I found was Perl POD documentation from 1989.
Newer technologies include GoDoc, RDoc, PHPDoc, XML Comments in C#, and many others, including the already mentioned JavaDoc and Doxygen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another example is Swagger/OpenAPI.
The Swagger specification usually uses YAML to describe the API.
This description contains technical parameters (source) and human-readable descriptions (documentation).
The documentation is useful for maintainers when they write the code implementing the API.
At the same time, the generated documentation is useful for the API&amp;#8217;s users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, API users need additional information.
The application API is only an interface to an application that may itself be complex.
The documentation must explain the application&amp;#8217;s purpose, usage, different use cases, and so on.
This information is not part of the Swagger specification.
Technically, you can include it in the Swagger specification, but it is not the best place for it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-5-modern-way-of-mixing&quot;&gt;2.5. Modern Way of Mixing&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The modern way of mixing documentation and source code is to use a tool that can combine documentation markup with information from the code.
There are many different tools that can do this.
Most of these tools support textual, markup-formatted documents, extending the basic markup language.
The actual execution can occur as a preprocessor or by modifying the markup processor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/javax0/javax0.github.io/master/assets/images/2024-10-09-03.png&quot; alt=&quot;2024 10 09 03&quot; width=&quot;60%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the extra meta-markup language has some drawbacks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is an extra language to learn.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is simpler to copy something like a configuration parameter name into the documentation than to add meta-information to the code and reference it from the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Receiving warnings or errors about inconsistencies between the documentation and the code can be annoying.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the same time, these can also be advantages, except perhaps the first one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you reference a configuration name instead of copying it, the documentation will remain consistent when the developer changes it.
Warnings about inconsistencies can be beneficial.
While receiving a warning may be annoying, it is better than having unnoticed inconsistencies in the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following section, I will show a few examples of how to handle these situations using the Jamal meta-markup document processor.
It is only fair to mention that I am the author of Jamal.
There are other tools you can use, and you should choose the one that best fits your needs.
In my non-humble opinion, Jamal is the best tool for documentation purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-6-examples-using-jamal&quot;&gt;2.6. Examples Using Jamal&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jamal is a general-purpose meta-markup processor.
It is a Java application, but this should be the last thing you worry about.
It works on Linux, macOS, and Windows.
The installation is simple.
You download the installation kit for your architecture, start it, click a few times on &quot;continue,&quot; and you&amp;#8217;re all set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The homepage for Jamal is &lt;a href=&quot;https://github.com/verhas/jamal&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The conversion can be done from the command line, but it is also integrated into the IntelliJ Asciidoctor plugin and AsciidocFX editor.
In these cases, you can edit Asciidoc and Markdown documents WYSIWYG, including the Jamal meta-markup commands, and the conversion happens automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When you edit a Markdown document, the meta-markup preprocessor will convert it to Asciidoc in the memory of the editor, and the editor will think you are editing an Asciidoc document, displaying it formatted.
This is a little workaround needed because the Markdown plugin for IntelliJ does not support preprocessor integration.
Similarly, you can edit XML and other formats with Jamal meta-markup, and they will be displayed through the Asciidoctor plugin.
There are video tutorials installing and configuring Jamal: &lt;a href=&quot;https://www.youtube.com/watch?v=b6uBseiZlQg&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=b6uBseiZlQg&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2-6-1-consistency-check&quot;&gt;2.6.1. Consistency Check&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest example is a consistency check.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some segments of the documentation are closely related to specific parts of the source code.
In that case, it would be helpful to receive a warning if the part of the source code has changed since the documentation was updated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s look at an example!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The URLs in this article point to a specific commit in the repositories so that the examples remain stable.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source code for the documentation of the Jamal IO package at line 290:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/c96d64674defb8c86d0000083f5649292ba2853c/jamal-io/README.adoc.jam#L290&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/c96d64674defb8c86d0000083f5649292ba2853c/jamal-io/README.adoc.jam#L290&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;contains the following line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{%@snip:check id=java_echo_version hashCode=5dd285e7%}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Java code &lt;code&gt;TestExec.java&lt;/code&gt; at line 24:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/c96d64674defb8c86d0000083f5649292ba2853c/jamal-io/src/test/java/javax0/jamal/io/TestExec.java#L24&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/c96d64674defb8c86d0000083f5649292ba2853c/jamal-io/src/test/java/javax0/jamal/io/TestExec.java#L24&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;contains the following lines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;        // tag::java_echo_version[]
        System.setProperty(&quot;exec&quot;, &quot;java&quot;);
        // end::java_echo_version[]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation includes these lines verbatim as a demonstration.
It also explains what the code does.
What happens when the code changes and the explanation becomes inconsistent with the new code?
There is no way (currently) to update the document without manual human work, but at least we can detect the possible inconsistency.
The &lt;code&gt;snip:check&lt;/code&gt; meta-markup calculates the actual hash code of the snippet and compares it to the hash code stored in the meta-markup.
If it is different, the processing of the document will issue a warning, giving the documentarian a chance to update the document, make it consistent with the actual version of the code, and then update the hash code.
(The error message contains the correct hash code and even a &lt;code&gt;sed&lt;/code&gt; command to update the document with a single command.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The meta-markup can check against the hash code or the number of lines in a snippet or a whole file, increasing the coupling between the documentation and the code, resulting in better consistency.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2-6-2-include-code-in-documentation&quot;&gt;2.6.2. Include Code in Documentation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next example is when the documentation includes part of the actual code, but not as a code sample.
The Jamal meta-markup processor has many modules, including one that implements a simple BASIC-like programming language.
This programming language has keywords.
The keywords are defined in a Java source file called &lt;code&gt;Lexer.java&lt;/code&gt; at line 16:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/jamal-prog/src/main/java/javax0/jamal/prog/analyzer/Lexer.java#L16&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/jamal-prog/src/main/java/javax0/jamal/prog/analyzer/Lexer.java#L16&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;final static private Set&amp;lt;String&amp;gt; RESERVED = Set.of(
        //snipline KEYWORDS
        &quot;if&quot;, &quot;else&quot;, &quot;elseif&quot;, &quot;then&quot;, &quot;endif&quot;, &quot;while&quot;, &quot;wend&quot;, &quot;for&quot;, &quot;next&quot;, &quot;do&quot;, &quot;until&quot;, &quot;and&quot;, &quot;or&quot;, &quot;not&quot;, &quot;to&quot;, &quot;step&quot;, &quot;end&quot;
);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The documentation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/jamal-prog/README.adoc.jam#L438&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/jamal-prog/README.adoc.jam#L438&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;includes the list of keywords with the line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The keywords are {%#replace (regex) /{%@snip KEYWORDS%}/&quot;/`/%}.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Java comment &lt;code&gt;snipline&lt;/code&gt; signals to the processor that the next line is a snippet that will or may be included in the documentation with the name &lt;code&gt;KEYWORDS&lt;/code&gt;.
The documentation includes the snippet with the &lt;code&gt;snip&lt;/code&gt; meta-markup and also transforms it, replacing the double quotes with backticks.
This will essentially list the keywords found in the code without copying them into the documentation manually.
The &quot;copy&quot; will be done by the meta-markup processing.
If the list of keywords in the code ever changes, the documentation will be updated automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2-6-3-fetch-version-number&quot;&gt;2.6.3. Fetch Version Number&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another example is fetching version numbers from the &lt;code&gt;pom.xml&lt;/code&gt; file.
Documentations often refer to the &quot;latest version&quot; in sample code or other places when talking about the current version.
Why ask the reader to look at the release history or the &lt;code&gt;pom.xml&lt;/code&gt; file while reading the documentation?
Reading the documentation should be frictionless, without requiring the reader to search elsewhere.
Getting version information from another source is not the reader&amp;#8217;s task.
It can be done by the documentation generator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same &lt;code&gt;README.adoc.jam&lt;/code&gt; file we used in the previous example contains the following lines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{%@snip:xml pom=pom.xml%}\
{%#define VERSION={%pom /project/version/text()%}%}\

[source,xml]
----
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.javax0.jamal&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;{%pom /project/artifactId/text()%}&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;{%VERSION%}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
----&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This fetches the version number from the &lt;code&gt;pom.xml&lt;/code&gt; file and uses it in the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2-6-4-documentation-in-the-code&quot;&gt;2.6.4. Documentation in the Code&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes it makes sense to include part of the documentation inside the source code.
An example of this is the documentation of the parameter options for the &lt;code&gt;for&lt;/code&gt; meta-markup command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source code that implements the parameter option handling is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/jamal-core/src/main/java/javax0/jamal/builtins/ForState.java#L30&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/jamal-core/src/main/java/javax0/jamal/builtins/ForState.java#L30&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and it contains the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public ForState(Scanner.ScannerObject scanner, Processor processor) {
    this.processor = processor;
    // snippet parops_for
    separator = scanner.str(&quot;$forsep&quot;, &quot;separator&quot;, &quot;sep&quot;).defaultValue(&quot;,&quot;);
    // can define the separator if it is different from the default, which is `,` comma.
    // The value is used as a regular expression, providing very versatile possibilities.
    subSeparator = scanner.str(&quot;$forsubsep&quot;, &quot;subseparator&quot;, &quot;subsep&quot;).defaultValue(&quot;\\|&quot;);
    // can define the subseparator if it is different from the default, which is `|` pipe.
    // It is used when there are multiple variables in the loop.
    // Similarly to the separator, the value is used as a regular expression.
    trim = scanner.bool(&quot;trimForValues&quot;, &quot;trim&quot;);
    // is a boolean parameter.
    // If present and `true`, the values are trimmed, removing spaces from the beginning and end.
    skipEmpty = scanner.bool(&quot;skipForEmpty&quot;, &quot;skipEmpty&quot;);
    // is a boolean parameter.
    // If present and `true`, empty values are skipped.
    lenient = scanner.bool(&quot;lenient&quot;);
    // is a boolean parameter.
    // If present and `true`, the number of values in the list is not checked against the number of variables.
    evalValueList = scanner.bool(&quot;evaluateValueList&quot;, &quot;evalist&quot;);
    // is a boolean parameter.
    // If present and `true`, the value list is evaluated as a macro before splitting it into values.
    join = scanner.str(&quot;$forjoin&quot;, &quot;join&quot;).defaultValue(&quot;&quot;);
    // is used to join the values together.
    // The default is the empty string.
    // end snippet
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the code defining the parameter options, and each line declaring a parameter option programmatically is followed by one or more comment lines describing the option.
What the processing will need is to include this information, with some text transformation, into the documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Asciidoc document incorporating the documentation from these lines is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/documentation/macros/for.adoc.jam#L74&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/jamal/blob/c8486d51f622fb4bda80d5b12b0d150582637646/documentation/macros/for.adoc.jam#L74&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;with the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;The options are
{%@snip:collect from=../../jamal-core/src/main/%}
{%#replaceLines replace=&quot;/.*?scanner\\.\\w+\\((.*?)\\).*/* $1/&quot; replace=&quot;/\&quot;/`/&quot; replace=|^\s*//|
{%@snip parops_for%}
%}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;snip:collect&lt;/code&gt; meta-tag instructs the processor to collect snippets from the source directory.
The following lines reference the snippet named &lt;code&gt;parops_for&lt;/code&gt; and transform it with three regular expression search-and-replace actions.
First, it looks for the string &lt;code&gt;scanner&lt;/code&gt; and transforms the program line into a list bullet with the strings, which are the alternative names of the options.
Next, it replaces double quotes with backticks.
Finally, the last step removes the &lt;code&gt;//&lt;/code&gt; from the start of the comment lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This results in an itemized list of the options in the documentation.
If any new option is inserted or one is deleted, the list will automatically update.
The developer is less likely to forget to add the documentation because it is right there, following the declaration of the parameter option.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;2-6-5-mixing-swagger-yaml-with-documentation&quot;&gt;2.6.5. Mixing Swagger YAML with Documentation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last example is mixing the documentation included in the Swagger YAML file with the main documentation.
OpenAPI YAML files define the API of a REST service, and they can contain the documentation of the API.
However, the documentation of the API is different from the documentation of the application.
The latter can, and usually should, include the first one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example is the OpenAPI YAML file of the AxsessGard application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/serverless-u/AxsessGard/blob/d7bee0fc4ac17e23da3c07ef6b5cb83ed6b5800a/src/main/resources/openapi.yaml&quot; class=&quot;bare&quot;&gt;https://github.com/serverless-u/AxsessGard/blob/d7bee0fc4ac17e23da3c07ef6b5cb83ed6b5800a/src/main/resources/openapi.yaml&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is nothing special about this file.
It is structured, and since Jamal supports reading YAML structures, there is no need to add snippet markers to the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Asciidoc documentation using the information from the YAML file is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/serverless-u/AxsessGard/blob/d7bee0fc4ac17e23da3c07ef6b5cb83ed6b5800a/README.adoc.jam#L127&quot; class=&quot;bare&quot;&gt;https://github.com/serverless-u/AxsessGard/blob/d7bee0fc4ac17e23da3c07ef6b5cb83ed6b5800a/README.adoc.jam#L127&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and it contains the following lines:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{%#yaml:

define api={%@include [verbatim] src/main/resources/openapi.yaml%}%}
{%@yaml:format prettyFlow flowStyle=BLOCK%}

{%@yaml:set paths=/api.paths%}

{%!@for $path from paths=
{%!@for $METHOD in (get,post,put)=
{%#if|{%@yaml:get (from=api) (paths[&apos;$path&apos;].$METHOD != null)%}|
=== {%@case:upper $METHOD%} `$path`

{%@yaml:get (from=api) (paths[&apos;$path&apos;].$METHOD.description)%}
%}
%}%}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reads the YAML file while processing the documentation,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loops through the list of paths in an outer loop,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;loops through each existing method in an inner loop, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;creates a section for each method in each path, including the description of the method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This last one is a fairly complex example, using very advanced features of the Jamal meta-markup processor.
The result is a documentation that contains both the application documentation and the API documentation in one place.
If the API documentation changes, it will automatically be included in the application documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-conclusion-and-summary&quot;&gt;3. Conclusion and Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, we discussed the structure of software documentation, how it is created separately in documentation files, and how it can be partly embedded in the source code.
We explored how information in the source code can be used to help generate the documentation.
While integrating information from the source code has its challenges, it also offers advantages.
In my opinion, the disadvantages stem from:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Human reluctance to adopt any new technology that must be learned.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The increased complexity of the documentation process, which&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is unavoidable if you want better automation supporting consistency and better, automated documentation updates,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;partially arises from the immaturity of currently used tools.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, the advantages balance these drawbacks by following the DRY (Don&amp;#8217;t Repeat Yourself) principle, which has been applied in programming for over half a century.
I also demonstrated the use of a tool that is universal and supports any documentation format.
It presents the opportunity to mix documentation and source code in a way that best suits documentarians.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are tools available.
There are no excuses to manually update documentation when automation could handle it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Programming Language with no Syntax?</title><link href="https://javax0.github.io/2024/09/08/ouroboros.html" rel="alternate" type="text/html" title="Programming Language with no Syntax?" /><published>2024-09-08T00:00:00+02:00</published><updated>2024-09-08T00:00:00+02:00</updated><id>https://javax0.github.io/2024/09/08/ouroboros</id><content type="html" xml:base="https://javax0.github.io/2024/09/08/ouroboros.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is it possible to have a programming language that has no syntax?
It sounds like a contradiction.
Programming languages are all about syntax, plus a bit of code generation, optimization, run-time environment, and so on.
But syntax is the most important part as far as programmers are concerned.
When encountering a new programming language, it takes time to learn the syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Could we just make the syntax disappear or at least make it as simple as possible?
Could we also make the syntax arbitrary so that the programmer writing the code can define it for themselves?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ouroboros is a programming language that tries to do just that.
It has the simplest syntax ever.
It is so simple that it does not even have a syntax analyzer.
All it has is a lexical analyzer, which is 20 lines long.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the same time, you can write complex programs and even expressions with parentheses and operators of different precedence, assuming you write your own syntax for that in the program.
That way, no syntax also means any syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is an introduction to Ouroboros, a programming language with no syntax.
It is a toy, never meant to be used in production, but it is a fun toy to play with, especially if you have ever wanted to create your own programming language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were programming languages with minimal syntax.
One of the very first languages was LISP, which used only parentheses to group statements as lists.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are familiar with TCL, you may remember how simple the language is.
However, it still defines complex expressions and control structures as part of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Another simple language to mention is FORTH.
It is a stack language.
The syntax is minimal.
You either put something on the stack or call a function that works with the values on the stack.
FORTH was also famous for its minimal assembly core and for the fact that the rest of the compiler was written in FORTH itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These languages inspired the design of Ouroboros.
LISP is known for the simplest syntax.
One might say that LISP has the simplest syntax of all programming languages, but it would be a mistake.
True to its name, it uses parentheses to delimit lists, which can be either data or programming structures.
As you may know, LISP stands for &quot;Lots of Irritating Superfluous Parentheses.&quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ouroboros does not do that.
It inherits the use of &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; from TCL, but unlike LISP, you are forced to use them only where they are really needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ouroboros, although being an interpreted language, can compile itself.
Well, not really compile, but you can define syntax for the language in the language itself.
However, it is not like in the case of compilers where the compiler is written in the source language.
One of the first compilers was the PASCAL compiler written by Niklaus Wirth in PASCAL.
The C compiler was also written in C, and more and more language compilers are written in the language they compile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the case of an interpreted language, it is a bit different.
It is not a separate program that reads the source code and generates machine code.
It is the executing code, the application program itself, that becomes part of the interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That way, you cannot look at it and say: this code is not Ouroboros.
Any code can be, depending on the syntax you define for it at the start of the code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-the-name-of-the-game&quot;&gt;2. The Name of the Game&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before diving into what Ouroboros is, let&amp;#8217;s talk about the name itself.
Ouroboros coils around itself in an endless cycle of creation and recreation.
The name &quot;Ouroboros&quot; is as multifaceted as the language itself, offering layers of meaning that reflect its unique nature and aspirations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-1-the-eternal-cycle&quot;&gt;2.1. The Eternal Cycle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At its core, Ouroboros draws inspiration from the ancient symbol of a serpent consuming its own tail.
This powerful image represents the cyclical nature of creation and destruction, perfectly encapsulating our language&amp;#8217;s self-referential definition.
Just as the serpent feeds upon itself to sustain its existence, Ouroboros the language is defined by its own constructs, creating a closed loop of logic and functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-2-ur-the-essence-of-simplicity&quot;&gt;2.2. UR: The Essence of Simplicity&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Abbreviated as &quot;UR,&quot; Ouroboros embraces the concept of fundamental simplicity.
In German, &quot;Ur—&quot; signifies something primordial, primitive, or in its most basic form.
This perfectly encapsulates the design philosophy behind Ouroboros: a language stripped down to its absolute essentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By pushing the simplification of syntax to the extreme, Ouroboros aims to be the &quot;ur-language&quot; of programming—a return to the most elemental form of computation.
Like the basic building blocks of life or the fundamental particles of physics, Ouroboros provides a minimal set of primitives from which complex structures can emerge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This radical simplicity is not a limitation but a feature.
It challenges programmers to think at the most fundamental level, fostering a deep understanding of computational processes.
In Ouroboros, every construct is essential, every symbol significant.
It&amp;#8217;s programming distilled to its purest form.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-3-our-shared-creation&quot;&gt;2.3. Our Shared Creation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The name begins with &quot;Our-,&quot; emphasizing the collaborative nature of this language.
Ouroboros is not just a tool but a shared endeavor that belongs to its community of developers and users.
It&amp;#8217;s a language crafted by us, for us, evolving through our collective efforts and insights.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-4-hidden-treasures&quot;&gt;2.4. Hidden Treasures&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Delve deeper into the name, and you&amp;#8217;ll uncover more linguistic gems:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;Oro&quot; in many Romance languages means &quot;gold&quot; or &quot;prayer.&quot; Ouroboros can be seen as a golden thread of logic, or a prayer-like mantra of computational thought.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Ob-&quot; as a prefix often means &quot;toward&quot; or &quot;about,&quot; suggesting that Ouroboros is always oriented toward its own essence, constantly reflecting upon and refining itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&quot;Boros&quot; could be playfully interpreted as a variation of &quot;bytes,&quot; hinting at the language&amp;#8217;s digital nature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parsing the name as &quot;our-ob-oros&quot; reveals a delightful multilingual wordplay: &quot;our way to the treasure.&quot; This blend of English (&quot;our&quot;), Latin (&quot;ob&quot; meaning &quot;towards&quot;), and Greek (&quot;oros,&quot; which can be associated with &quot;boundaries&quot; or &quot;definitions&quot;) mirrors the language&amp;#8217;s eclectic inspirations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just as Ouroboros draws from the diverse traditions of TCL, LISP, and FORTH, its name weaves together linguistic elements from different cultures.
This multilingual, multi-paradigm approach guides us toward the treasures of computation, defining new boundaries along the way, much like how TCL offers flexibility, LISP promotes expressiveness, and FORTH emphasizes simplicity and extensibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-5-a-name-that-bites-back&quot;&gt;2.5. A Name That Bites Back&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ultimately, Ouroboros is a name that challenges you to think recursively, to see the end in the beginning and the whole in every part.
It&amp;#8217;s a linguistic puzzle that mirrors the very nature of the programming language it represents—complex, self-referential, and endlessly fascinating.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you embark on your journey with Ouroboros, remember that you&amp;#8217;re not just writing code; you&amp;#8217;re participating in an ancient cycle of creation, where every end is a new beginning, and every line of code feeds into the greater whole of computational possibility.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-what-is-ouroboros&quot;&gt;3. What is Ouroboros&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ouroboros is a programming language that has no syntax.
I have already said that, and now comes the moment of truth: it is a &quot;lie.&quot;
There is no programming language with absolutely no syntax.
UR has a syntax, and it is defined with this sentence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;You write the lexical elements of the language one after the other.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-1-syntax&quot;&gt;3.1. Syntax&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That is all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the interpreter starts to execute the code, it begins reading the lexical elements one after the other.
It reads as many elements as it needs to execute some code and not more.
To be specific, it reads exactly one lexical element before starting execution.
When the execution triggered by the element is finished, it goes on reading the next element.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The execution itself can trigger more reads if the command needs more elements.
We will see it in the next example soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lexical element can be a number, a string, a symbol, or a word.
Symbols and words can and should have an associated command to execute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, the command &lt;code&gt;puts&lt;/code&gt; is borrowed shamelessly from TCL and is associated with the command that prints out a string.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;puts &quot;Hello, World!&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is the simplest program in Ouroboros.
When the command behind &lt;code&gt;puts&lt;/code&gt; starts to execute, it asks the interpreter to read the next element and evaluate it.
In this example, it is a constant string, so it is not difficult to calculate.
The value of a constant string is the string itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next example is a bit more complex:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;puts add &quot;Hello, &quot; &quot;World!&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this case, the argument to the command &lt;code&gt;puts&lt;/code&gt; is another command: &lt;code&gt;add&lt;/code&gt;.
When &lt;code&gt;puts&lt;/code&gt; asks the interpreter to get its argument, the interpreter reads the next element and then starts to execute.
As &lt;code&gt;add&lt;/code&gt; starts to execute, it needs two arguments, which it asks from the interpreter.
Since these arguments are strings, &lt;code&gt;add&lt;/code&gt; concatenates them and returns the result.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-2-blocks&quot;&gt;3.2. Blocks&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a special command denoted by the symbol &lt;code&gt;{&lt;/code&gt;.
The lexical analyzer recognizing this character will ask the interpreter to read the following elements until it finds the closing &lt;code&gt;}&lt;/code&gt;.
This call is recursive in nature if there are embedded blocks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The resulting command is a block command.
A block command executes all the commands in it and results in the last result of the commands in the block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;puts add {&quot;Hello, &quot; &quot;World!&quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we close the two strings into a block, then the output will be a single &lt;code&gt;World!&lt;/code&gt; without the `Hello, `.
The block &quot;executes&quot; both strings, but the value of the block is only the second string.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-3-commands&quot;&gt;3.3. Commands&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The commands implemented are documented in the &lt;a href=&quot;https://github.com/verhas/ouroboros/blob/main/README.adoc&quot;&gt;readme&lt;/a&gt; of the project on GitHub.
The actual set of commands is not fascinating.
Every language has a set of commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fascinating part is that in UR there is no difference between functions and commands.
Are &lt;code&gt;puts&lt;/code&gt; or &lt;code&gt;add&lt;/code&gt; commands or functions?
How about &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;?
They are all commands, and they are not part of the language per se.
They are part of the implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command &lt;code&gt;if&lt;/code&gt; asks the interpreter to fetch one argument, evaluated.
It will use this as the condition.
After this, it will fetch the next two elements without evaluation.
Based on the boolean interpretation of the condition, it will ask the interpreter to evaluate one of the two arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly, the command &lt;code&gt;while&lt;/code&gt; will fetch two arguments without evaluation.
It then evaluates the first as a condition, and if it is true, it will evaluate the second and then go back to the condition.
It fetched the condition unevaluated because it will need to evaluate it again and again.
In the case of the &lt;code&gt;if&lt;/code&gt; command, the condition is evaluated only once, so we did not need a reference to the unevaluated version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many commands use the unevaluated version of the arguments.
This use makes it possible to use the &quot;binary&quot; operators as multi-argument operators.
If you want to add up three numbers, you can write &lt;code&gt;add add 1 2 3&lt;/code&gt;, or &lt;code&gt;add* 1 2 3 {}&lt;/code&gt;, or &lt;code&gt;{add* 1 2 3}&lt;/code&gt;.
The command &lt;code&gt;add&lt;/code&gt; fetches the first argument unevaluated and sees if it is a &lt;code&gt;*&lt;/code&gt;.
If it is &lt;code&gt;*&lt;/code&gt;, then it will fetch the arguments until it encounters the end of the arguments or an empty block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a little syntactic sugar, which should be peculiar in the case of a language that has no syntax.
It really is there to make the experiment and the playing with the language bearable.
On the other side, it erodes the purity of the language.
It is also only a technical detail, and I mention it only because we will need to understand it when we discuss the metamorphic nature of the language.
It will be needed to understand the use of the first example there.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-4-variables&quot;&gt;3.4. Variables&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;UR supports variables.
Variables are strings with values associated with them.
The value can be any object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the interpreter sees a symbol or a bare word (identifier) to evaluate, it will check the value associated with it.
If the value is a command, then it will execute the command.
In other cases, it will return the value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The variables are scoped.
If you &lt;code&gt;set&lt;/code&gt; a variable in a block, then the variable is visible only in that block.
If there are variables with the same name in the parent block, then the variable in the child block will shadow the variable in the parent block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Variable handling and scoping are implementation details and not strictly part of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation as it is now supports boolean, long, double, big integer, big decimal, and string primitive values.
It also supports lists and objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A list is a list of values, and it can be created with the &lt;code&gt;list&lt;/code&gt; command.
The argument to the command is a block.
The command &lt;code&gt;list&lt;/code&gt; will ask the interpreter to fetch the argument unevaluated.
Afterward, it evaluates the block from the start the same way as the block command does.
However, instead of throwing away the resulting values and returning the last one, it returns a list of the results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An object is a map of values.
It can be created with the &lt;code&gt;object&lt;/code&gt; command.
The argument to the command is the parent object.
The fields of the parent object are copied to the new object.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Objects also have methods.
They are the fields that have a command as a value.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-introspection&quot;&gt;4. Introspection&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The interpreter is open like a cracked safe after a heist.
Nothing is hard-wired into the language.
When I wrote that the language interpreter recognizes bare words, symbols, strings, etc., it was only true for the initial setup.
The lexical analyzers implemented are UR commands, and they can be redefined.
They are associated with the names &lt;code&gt;$keyword&lt;/code&gt;, &lt;code&gt;$string&lt;/code&gt;, &lt;code&gt;$number&lt;/code&gt;, &lt;code&gt;$space&lt;/code&gt;, &lt;code&gt;$block&lt;/code&gt;, &lt;code&gt;$blockClose&lt;/code&gt;, and &lt;code&gt;$symbol&lt;/code&gt;.
The interpreter uses the variable structures to find these commands.
There is another variable named &lt;code&gt;$lex&lt;/code&gt; that is a list of the lexical analyzers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The interpreter uses this list when it needs to read the next lexical element.
It invokes the first, then the second, and so on until one of them returns a non-null value, a lexical element, which is a command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you modify this list, then you can change the lexical analyzers, and that way you can change the syntax of the language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest example is changing the interpretation of the end-of-line character.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may remember that we can use the binary operators using multiple arguments terminated with an empty block.
It would be nice if we could omit the block and just write &lt;code&gt;add* 1 2 3&lt;/code&gt; simply adding a new-line at the end.
We can do that by changing the lexical analyzer that recognizes the end-of-line character, and this is exactly what we are going to do in this example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set q add* 3 2
1 {} puts q
insert $lex 0 &apos;{
if { eq at source 0 &quot;\n&quot;}
   {sets substring 1 length source source &apos;{}}}
set q add* 3 2
1 {} puts q&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We insert a new lexical analyzer at the beginning of the list.
If the very first character of the current state of the source code is a new-line character, then the lexical analyzer eats this character and returns an empty block.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The command &lt;code&gt;source&lt;/code&gt; returns the source code that was not parsed by the interpreter yet.
The command &lt;code&gt;sets&lt;/code&gt; sets the source code to the string value specified.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first &lt;code&gt;puts q&lt;/code&gt; will print 6 because at the time of the first calculation, new-lines are just ignored, and that way the value of &lt;code&gt;q&lt;/code&gt; is &lt;code&gt;add* 3 2 1 {}&lt;/code&gt;.
The second &lt;code&gt;puts q&lt;/code&gt; will print 5 because the new-line is eaten by the lexical analyzer, and the value of &lt;code&gt;q&lt;/code&gt; is &lt;code&gt;add* 3 2 {}&lt;/code&gt;.
Here, the closing &lt;code&gt;{}&lt;/code&gt; was the result of the lexical analysis of the new-line character.
The values &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt; on the next line are calculated, but they do not have any effect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a very simple example.
If you want to see something more complex, the project file &lt;code&gt;src/test/resources/samples/xpression.ur&lt;/code&gt; contains a script that defines a numerical expression parser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a special command called &lt;code&gt;fixup&lt;/code&gt;.
This command forces the interpreter to parse the rest of the source.
After this point, the lexical analyzers are not used anymore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Executing this command does not give any performance benefit, and that is not the purpose.
It is more like a declaration that all the codes that are part of the source code introspection and the metamorphic calculation are done.
A special implementation of the command can also take the parsed code and generate an executable, turning the interpreter into a compiler.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-technical-considerations&quot;&gt;5. Technical Considerations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The current version is implemented in Java.
Ouroboros is not a JVM language, though.
We do not compile the code to Java byte-code.
The Java code interprets the source and executes it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation is an MVP focusing on the metamorphic nature of the language.
It is meant to be an experiment.
This is the reason why there are no file, network, and other I/O operations except the single &lt;code&gt;puts&lt;/code&gt; command that writes to the standard output.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Java service loader feature is used to load the commands and to register them with their respective names in the interpreter.
It means that implementing extra commands is as simple as creating them, writing a class implementing a &lt;code&gt;ContextAgent&lt;/code&gt; to register them (see the source code), and putting them on the classpath.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The whole code is open-source and available on GitHub.
It is licensed under the Apache License 2.0 (see the license file in the repo).
It is exactly 100 classes at the time of writing this article.
It means that the source code is simple, short, and easy to understand.
If you need some straightforward scripting language in your application, you can use it.
It was not meant to be for production, though.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-going-further&quot;&gt;6. Going Further&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is no plan currently to extend the language and include more commands.
We only plan to create more metamorphic code in the language.
The reason for that is that we do not see the language as a practical tool as of today.
If it proves to be useful and gains a user base and utilization, we certainly will incorporate more commands to support I/O, file handling, networking, and so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also have visions of implementing the interpreter in other languages, like in Rust and Go.
Anyone suggesting or wanting to develop commands for better usability or adding features is welcome.
It can be a parallel project, or it can be merged into the main project if that makes sense.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-conclusion&quot;&gt;7. Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In exploring Ouroboros, we delved into the concept of a programming language that minimizes syntax to the point of almost non-existence.
This radical approach challenges the conventional understanding of what a programming language should be, presenting a system where syntax is both absent and infinitely customizable.
By drawing inspiration from languages like LISP, TCL, and FORTH, Ouroboros embodies simplicity and introspection, allowing programmers to define their syntax and commands within the language itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While Ouroboros is not designed for practical production use, it serves as an intriguing experiment in language design and metaprogramming.
Its self-referential nature and minimalistic design offer a playground for developers interested in the fundamentals of computation, syntax design, and language interpretation.
Whether it evolves into a more robust tool or remains a fascinating intellectual exercise, Ouroboros pushes the boundaries of how we think about programming languages, inviting us to consider the possibility of a language where syntax is as mutable and recursive as the Ouroboros serpent itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Better Writing with AI</title><link href="https://javax0.github.io/2024/07/26/how_i_wrote_the-llm-article.html" rel="alternate" type="text/html" title="Better Writing with AI" /><published>2024-07-26T00:00:00+02:00</published><updated>2024-07-26T00:00:00+02:00</updated><id>https://javax0.github.io/2024/07/26/how_i_wrote_the-llm-article</id><content type="html" xml:base="https://javax0.github.io/2024/07/26/how_i_wrote_the-llm-article.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I wrote the &lt;a href=&quot;https://javax0.github.io/2024/07/22/llm-and-rag.html&quot;&gt;previous article&lt;/a&gt; using AI&amp;#8217;s help.
In this article, which I write the conventional way, I describe&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;what I did&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;why I did, and&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;what I think about the result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-how-i-wrote-the-llm-article&quot;&gt;2. How I wrote the LLM article&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a first step, I created some handwritten notes and bullet points about what I wanted to discuss in the article.
As a very first attempt, I tried to do the article without the structure at hand, but the result was terrible.
I was deviating from the topic, so I created a long, blossoming text that would be acceptable in a live conference speech but not in a written article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After creating the notes, I dictated the article, walking up and down in my room and feeding the text into MacWhisperer.
I was essentially dictating the text of the article.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have used English for 45 years, but it is not my first language.
The transcription is fine; my accent is good enough for dictation.
I can speak English in front of an audience; dictating an article&amp;#8217;s text is a different trade.
I was not content with the result.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I repeated the process in my mother tongue, Hungarian.
The result was better, but still not perfect, but I had no more options for this phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I copied the transcribed text into the article and asked calude.ai to clean it up.
Since it was Hungarian, I used Hungarian for the prompting, but the result is language-independent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Claude.ai first made a short version of the article, like a one-pager, though I asked it not to shorten it.
I amended the prompt and could get as far as 70% of the original text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Making the text shorter is acceptable to some level you can expect.
Spoken text is more verbose than one in an article.
However, 30% was too much, and I looked at some specific content that claude.ai skipped.
I asked why it skipped that part, and strangely, it fixed the text instead of answering the question.
I had to command it to answer the question and not treat it as scolding.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The explanation was reasonable, but again, it apologized and explained that it was its fault for assuming those parts were unnecessary.
And it provided a corrected full-length text, which was finally acceptable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could use it, but as a programmer, I wanted a workflow I could repeat without haggling with an AI.
So, I asked calue.ai to provide me with the prompt I should have asked in the first place.
It did, I tried, and it worked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, I had a Hungarian text that was almost perfect.
I was proofreading it and fixing some of the grammar, which was correct but smelled like a machine.
Then, I asked calude.ai to translate it into English.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I fed the translated text to Grammarly, and I fixed it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then I asked calude.ai to translate the English into German, Spanish, and Russian.
I do not know these languages well enough to check, though.
I understand them to various levels, but the level is far from my English enhanced with Grammarly or my Hungarian.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Russian translation was a bit tricky.
Claude.ai has already translated the text to German from English, but it has started to complain that the text is too long for one session.
How about summarizing it in Russian or translating it into smaller etaps?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I told it that it had already translated the English version without question to German.
And then claude.ai said that okay, then, and it translated the text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My Russian-speaking colleague told me it reeks a bit of AI, but that should be okay.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is okay because&amp;#8230;&amp;#8203; and here comes the next part:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-what-i-wanted-to-achieve&quot;&gt;3. What I wanted to achieve&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Writing an article is delivering information.
It takes a lot of time and effort to write one.
With the recent development of AI technologies, I started to use AI to proofread my English.
I thought I would also use it to transcribe it from spoken text.
After all, I can speak faster than I can write.
If there is something that a machine can do instead of a human, then let the machine do it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To answer the question of how to do it is engineering.
And I did what I did; here you are.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-conclusion-feelings&quot;&gt;4. Conclusion, Feelings&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is the result good?
Please read the article; I linked it at the top, and you can tell.
Dictating and speaking are different from writing.
It is faster, but the style will be different.
Even in the English version, you may feel it was produced using a different method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At least it is a good experience playing with the bleeding edge technology.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Технология LLM и RAG</title><link href="https://javax0.github.io/2024/07/22/llm-and-rag-ru.html" rel="alternate" type="text/html" title="Технология LLM и RAG" /><published>2024-07-22T00:00:00+02:00</published><updated>2024-07-22T00:00:00+02:00</updated><id>https://javax0.github.io/2024/07/22/llm-and-rag-ru</id><content type="html" xml:base="https://javax0.github.io/2024/07/22/llm-and-rag-ru.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-введение&quot;&gt;1. Введение&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Эта статья представляет собой краткое введение в технологии LLM и RAG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Текст содержит упрощения, которые позволяют лучше понять материал широкому кругу читателей. Однако, если вы заинтересованы в глубоком изучении этих технологий, данная статья может оказаться недостаточной.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Некоторые моменты могут быть изложены не совсем точно, хотя в целом они хорошо передают основную идею.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-суть-технологии-rag&quot;&gt;2. Суть технологии RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;RAG — это аббревиатура от английского Retrieval Augmented Generation.
Эта технология дополняет приложения на основе больших языковых моделей (LLM, Large Language Model).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Цель RAG — предоставить возможность работать с базами знаний и информацией, которой нет в самой языковой модели.
Большая языковая модель представляет собой нейронную сеть, обученную на больших объемах данных, которые обычно доступны в интернете.
Благодаря этому, такие модели могут общаться почти как люди и отвечать на вопросы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Однако, для работы с внутренними данными компании, которые не являются публичными, RAG позволяет моделям получать доступ к внешним источникам информации, дополняя свои ответы актуальными данными.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-ограничения-llm&quot;&gt;3. Ограничения LLM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;На текущем этапе развития LLM невозможно напрямую обучить модель корпоративной информации.
Современные приложения работают следующим образом: разработчики создают языковые модели, затем обучают их, настраивая миллионы или даже миллиарды параметров с помощью обучающих данных.
Этот процесс включает задавание вопросов модели, получение ответов и последующую корректировку параметров на основе качества ответов.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Конечно, всё это осуществляется с помощью программ и алгоритмов, а не вручную.
В нынешних условиях этот процесс может занимать несколько месяцев и требует огромных энергетических ресурсов, сопоставимых с энергопотреблением небольшого города.
Для выполнения тонкой настройки используются тысячи машин, работающих параллельно.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-характеристики-моделей-llm&quot;&gt;4. Характеристики моделей LLM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После завершения обучения модель можно скачать и запустить на своей машине.
Сама модель обычно занимает 1-2 ГБ данных.
После этого нейронная сеть больше не изменяется и не обучается новому.
Чтобы модель усвоила что-то новое, необходимо выпустить её обновлённую версию.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-применение-технологии-rag&quot;&gt;5. Применение технологии RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Тем не менее, мы хотим использовать возможности LLM внутри компании.
Наша цель — чтобы эта нейронная сеть могла давать ответы, учитывая внутреннюю информацию компании, когда мы задаем вопросы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Представьте, что в компанию приходит новый сотрудник, который ничего о ней не знает.
Прежде чем задавать ему вопросы о компании, мы сначала обучаем его, предоставляя необходимую информацию.
Этот сотрудник усваивает её, и она становится частью его знаний.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-принцип-работы-rag&quot;&gt;6. Принцип работы RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Представьте, что человек сосредотачивается на работе, забывая обо всём остальном, когда идёт домой, и хранит специфическую для компании информацию отдельно.
Аналогично работает модель LLM и технология RAG.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы сохраняем информацию, которой нет в нейронной сети LLM, в отдельной базе данных.
Причина проста: эту информацию нельзя интегрировать напрямую в нейронную сеть или её модель, поскольку она является частной и конфиденциальной.
Мы не всегда знаем, как эти данные структурированы, и они не обязательно могут быть изменены в текущем виде программы.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Можно сказать, что у нас нет &quot;исходного кода&quot; этих данных — не в смысле программного кода, а оригинальной формы этих данных.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-характеристики-модели-llm&quot;&gt;7. Характеристики модели LLM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После нескольких этапов обработки модель становится относительно небольшим набором данных объёмом около 1 ГБ.
Хотя этот размер может показаться небольшим по сравнению с другими данными, для LLM это считается компактным.
Однако на этом этапе модель, скорее всего, уже не подлежит изменениям.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-использование-векторных-баз-данных&quot;&gt;8. Использование векторных баз данных&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Если мы хотим сохранить собственную информацию в отдельной базе данных, обычно используем векторные базы данных.
Векторная база данных — это специализированное приложение, которое способно определять расстояние между двумя фрагментами текста.
Оно оценивает, насколько эти тексты связаны по смыслу и сколько у них общих ключевых слов.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-подготовка-базы-знаний&quot;&gt;9. Подготовка базы знаний&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы разбиваем базу знаний, доступную в компании, на небольшие фрагменты текста.
Обычно эти фрагменты составляют около тысячи символов и формируют отдельные записи.
Между ними предусмотрено небольшое перекрытие: каждый следующий фрагмент начинается немного раньше окончания предыдущего.
Это помогает сохранить контекст и непрерывность в тексте.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-алгоритм-встраивания&quot;&gt;10. Алгоритм встраивания&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Мы помещаем каждый из этих текстовых фрагментов в базу данных и используем алгоритм встраивания, чтобы присвоить им векторы.
Вектор — это последовательность чисел, аналогичная GPS-координатам.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;По сути, этот вектор представляет собой пространственную координату текста, но это пространство многомерное, а не трёхмерное.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-работа-rag-для-вопросов&quot;&gt;11. Работа RAG для вопросов&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Когда пользователь задает вопрос приложению, разработанному с использованием технологии RAG, этот вопрос также преобразуется в вектор.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Система встраивания определяет положение этого вопроса в многомерном пространстве.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем мы обращаемся к векторной базе данных, в которой хранятся векторы всех наших текстовых фрагментов, чтобы выяснить, какие из них находятся ближе всего к заданному вопросу в этом пространстве.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;12-расчет-расстояния-между-векторами&quot;&gt;12. Расчет расстояния между векторами&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Этот процесс включает вычисление расстояния и индексирование.
Если представить, это похоже на расчёт расстояния по теореме Пифагора в ортогональном векторном пространстве.
Хотя это может звучать сложно, нам не обязательно разбираться в деталях или знать, как это работает на уровне формул.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;13-характеристики-алгоритма-встраивания&quot;&gt;13. Характеристики алгоритма встраивания&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Основная идея заключается в том, что алгоритм встраивания обычно также основан на нейронной сети.
Существуют более простые алгоритмы встраивания, но они менее эффективны на практике.
Более сложные алгоритмы встраивания, основанные на нейронных сетях, выполняют эту задачу с учётом особенностей языка.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;14-выбор-релевантных-кусков-текста&quot;&gt;14. Выбор релевантных кусков текста&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Векторная база данных определяет, какие фрагменты текста из нашей базы знаний наиболее близки к вопросу и, следовательно, являются релевантными для ответа.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;15-сборка-промпта&quot;&gt;15. Сборка промпта&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;После этого мы формируем промпт для LLM, добавляя перед основным вопросом те фрагменты текста, которые были извлечены из нашей базы знаний.
Весь текст сразу включить невозможно, так как это было бы слишком много, но мы можем добавить несколько фрагментов — пять, шесть, семь или даже десять.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;В промпте указываем, что это контекст, в рамках которого мы хотим получить ответ, а затем задаём сам вопрос.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;16-резюме-процесса-rag&quot;&gt;16. Резюме процесса RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Затем мы передаем сформированный промпт алгоритму LLM, который его обрабатывает и генерирует ответ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Вот и всё.
Процесс RAG настолько прост.
Вам нужна векторная база данных, и нужно разделить текст на фрагменты.
Для тех, кто знаком с программированием, это не представляет большой сложности.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Текст следует сохранить в обычной базе данных, чтобы его можно было извлечь для создания промпта.
Векторы сохраняются в векторной базе данных, чтобы определить, какие фрагменты текста релевантны для конкретного вопроса.
Также нужно уметь задавать вопросы LLM из программы и использовать стандартные интерфейсы для этого.
В заключение, необходимо отправить полученный ответ обратно клиенту или пользователю, чтобы он мог его прочитать.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;17-заключение&quot;&gt;17. Заключение&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;	С помощью этой технологии мы создали приложение, с которым можно взаимодействовать так же, как с ChatGPT.
Однако оно обладает дополнительным преимуществом: помимо знаний о мире, полученных на момент завершения обучения, оно также включает информацию из нашей специальной базы знаний.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Введение</summary></entry><entry><title type="html">Az LLM és a RAG technológia</title><link href="https://javax0.github.io/2024/07/22/llm-and-rag-hu.html" rel="alternate" type="text/html" title="Az LLM és a RAG technológia" /><published>2024-07-22T00:00:00+02:00</published><updated>2024-07-22T00:00:00+02:00</updated><id>https://javax0.github.io/2024/07/22/llm-and-rag-hu</id><content type="html" xml:base="https://javax0.github.io/2024/07/22/llm-and-rag-hu.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-bevezetés&quot;&gt;1. Bevezetés&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ez a cikk egy rövid bevezető az LLM és a RAG technológiába.
A cikk sok egyszerűsítést tartalmaz, a célja, hogy a laikusok számára is érthető legyen.
Ha részletesebben érdekel a technológia, akkor ez a cikk nem lesz elég, sőt találhatsz benne olyan részeket amik nem teljesen pontosak, bár a lényeget jól átadják.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-a-rag-technológia-lényege&quot;&gt;2. A RAG technológia lényege&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Az RAG a Retrieval Augmented Generation rövidítése.
Ez egy angol betűszó.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ez a technológia próbálja kiegészíteni az LLM, azaz a Large Language Model alkalmazásokat.
A cél, hogy képesek legyenek kezelni olyan tudásbázist, olyan tudást, amely a Large Language Modelben magában nem található meg.
A Large Language Model önmagában egy olyan neurális hálózat, amit valamilyen módon tréningeztek.
Általában olyan adatokkal tréningezik, amelyek szabadon rendelkezésre állnak az interneten, igen nagy mennyiségben.
Ennek hatására a Large Language Modelek szinte emberi módon képesek kommunikálni.
Ha valamilyen kérdést felteszünk nekik, akkor erre tudnak válaszolni.
De fogalmuk sincs arról, milyen adatok vagy információk vannak egy vállalaton belül, hiszen ezek nem publikus adatok.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-az-llm-ek-korlátai&quot;&gt;3. Az LLM-ek korlátai&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Az LLM nem tanítható meg a mostani formában ezekre a vállalati információkra.
A jelenleg rendelkezésre álló alkalmazások úgy működnek, hogy a fejlesztők kialakítanak valamilyen modellt.
Utána trénelik ezt a modellt, több millió vagy milliárd paramétert állítanak be a tréning adatokkal.
Kérdéseket tesznek fel neki, jönnek a válaszok, és akkor a válaszok minősége alapján állítgatják ezeket a paramétereket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Természetesen nem kézzel - erre vannak programok és algoritmusok.
Ez a folyamat néhány hónap alatt készül el a mostani viszonyok között, egy kisebb város energiaigényét felhasználva.
Sok ezer gépen futtatják ezt a finomhangoló algoritmust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-az-llm-modellek-jellemzői&quot;&gt;4. Az LLM modellek jellemzői&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Amikor ez készen van, a modell letölthető és futtatható egy saját gépen.
Maga a modell 1-2 GB-nyi adatot jelent.
Ezután ez a neurális hálózat már nem változik, nem tanul meg új dolgokat.
Csak akkor tud új dolgot megtanulni, ha kapunk belőle egy új változatot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-a-rag-technológia-alkalmazása&quot;&gt;5. A RAG technológia alkalmazása&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mégis szeretnénk ezt a fajta lehetőséget egy cégen belül használni.
Azt szeretnénk, hogy ha egy kérdést felteszünk ennek a neurális hálózatnak, az LLM modellnek, akkor olyan választ adjon, ami figyelembe veszi a saját cégünk belső információit.
Ezt úgy tudjuk megtenni, mintha egy emberrel is ilyesmit csinálnánk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ha jön valaki a céghez, és kérdéseket akarunk neki feltenni a céggel kapcsolatban, de nem tud semmit a cégünkről, akkor először megtanítjuk dolgokra, információkat adunk neki.
Ő ezeket az információkat el fogja tenni a saját neurális hálójába.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-a-rag-működési-elve&quot;&gt;6. A RAG működési elve&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gondolhatjuk úgy, hogy fókuszálva a munkára, amikor hazamegy, minden mást elfelejtett, és ezeket a cégspecifikus információkat egy külön helyre rakja el.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Az LLM-nél és a RAG-nál is ez a modell.
Azokat az információkat, amik nincsenek benne az LLM neurális hálójában, külön rakjuk el egy külön adatbázisba.
Ha másért nem, azért, mert magának a neurális hálónak az adatbázisába, a modelljébe nem tudjuk beletenni.
Ezek nem publikusak, nem tudjuk, hogyan néznek ki, hogyan épülnek fel, és nem is feltétlenül módosíthatók már abban a formában, ahogyan a programban benne vannak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nincs meg, mondhatjuk talán így, hogy az adatok &quot;forráskódja&quot; - nem feltétlenül a program forráskódja, hanem az adatok eredeti formája.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-az-llm-modell-jellemzői&quot;&gt;7. Az LLM modell jellemzői&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ez a modell több lépcsőn keresztül lesz végül is egy 1 GB-os, tehát aránylag kicsinek tekinthető adathalmaz.
Relatív, hogy mi a kicsi, de egy LLM értelemben ez kicsinek tekinthető.
És nem biztos, hogy ez még olyan állapotban van, ami módosítható.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-vektoradatbázisok-használata&quot;&gt;8. Vektoradatbázisok használata&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ha egy külön adatbázisba akarjuk betenni azokat az információkat, amik saját információk, akkor erre úgynevezett vektoradatbázist szokás használni.
A vektoradatbázis egy speciális olyan alkalmazás, ami két szövegdarabról meg tudja mondani, hogy mennyire vannak közel egymáshoz.
Tehát mennyire szólnak ugyanarról, mennyire ugyanazok a kulcsszavak benne.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-a-tudásbázis-előkészítése&quot;&gt;9. A tudásbázis előkészítése&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A tudásbázist, ami a cégen belül rendelkezésre áll, felszabdaljuk szövegdarabokra.
Ezek a szövegdarabok tipikusan ezer karakter, ezer betű hosszúságúak, és ezek képeznek egy-egy rekordot.
Van közöttük egy kis átfedés, tehát nem ott kezdjük a következőt, ahol az előzőnek vége szakadt, hanem egy kicsit előbb.
Ez azért van, hogy legyen egyfajta kontextus és folyamatosság a szövegben.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-az-embedding-algoritmus&quot;&gt;10. Az embedding algoritmus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Minden egyes ilyen szövegdarabot elteszünk egy adatbázisba, és megkérünk egy úgynevezett embedding algoritmust, hogy a szövegdarabhoz rendeljen hozzá egy úgynevezett vektort.
A vektor egy számsorozat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ez hasonló ahhoz, mint például egy GPS koordináta.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tulajdonképpen ez a vektor ennek a darab szövegnek egy térbeli koordinátája, de ez a tér nem háromdimenziós, hanem nagyon sokdimenziós.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-a-rag-működése-kérdések-esetén&quot;&gt;11. A RAG működése kérdések esetén&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Amikor feltesz egy kérdést a felhasználó a RAG technológiával fejlesztett alkalmazásnak, akkor ezt a kérdést is vektorizáljuk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Megkérjük az embeddings rendszert, hogy mondja meg, hogy a térben hol helyezkedik el ez a kérdés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;És utána a vektoradatbázistól, amibe beleraktuk az összes szövegdarabunkhoz tartozó vektorokat, meg tudjuk kérdezni, hogy melyek azok a szövegdarabok a mi tudásbázisunkból, amelyek a legközelebb vannak térben a kérdéshez.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;12-a-vektorok-közötti-távolságszámítás&quot;&gt;12. A vektorok közötti távolságszámítás&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ez egy távolságszámolás és egyfajta indexelés.
Ha úgy tetszik, Pitagorasz-tétellel lehet számolni a távolságot egy ortogonális vektor térben.
Bonyolultnak hangzik, nem is kell vele igazából foglalkozni, nem kell tudnunk, hogy ez hogyan működik.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;13-az-embedding-algoritmus-jellemzői&quot;&gt;13. Az embedding algoritmus jellemzői&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lényeg az, hogy ez az embedding algoritmus, ami amúgy szintén egy neurális hálón szokott alapulni.
Vannak nagyon egyszerű embedding algoritmusok is, ezek praktikusan kevésbé használhatóak.
De vannak olyan bonyolultabb neurális hálók, amik ezt megteszik, nyelvtől függően.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;14-a-releváns-szövegdarabok-kiválasztása&quot;&gt;14. A releváns szövegdarabok kiválasztása&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A vektoradatbázis megmondja, hogy melyek azok a szövegdarabok a mi tudásbázisunkból, amelyek közel vannak a kérdéshez, vagyis relevánsak a kérdés megválaszolásához.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;15-a-prompt-összeállítása&quot;&gt;15. A prompt összeállítása&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ezek után az LLM-től mi egy olyan promptot kérdezünk, ami nem az eredeti prompt, hanem elé betesszük azokat a szövegdarabokat, amelyeket kiszedtünk a saját tudásbázisunkból.
Az egészet nem tehetjük be egy kérdésbe, mert az túl sok lenne, de néhányat, ötöt, hatot, hetet, vagy akár tizet be tudunk tenni a tudásbázisból.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beleírjuk a promptba, hogy ez egy kontextus, és a választ ebben a kontextusban szeretnénk megkapni, majd magát a kérdést.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;16-a-rag-folyamat-összefoglalása&quot;&gt;16. A RAG folyamat összefoglalása&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Utána ezt elküldjük az LLM algoritmusnak, ami ezt elolvassa, csinál vele valamit, megválaszolja.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;És tulajdonképpen ez az egész RAG ennyire egyszerű.
Kell hozzá egy vektoradatbázis, föl kell darabolnunk a szöveget.
Ha valaki ért a programozáshoz, az tudja, hogy ez nem egy olyan nagy dolog.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bele kell tenni egy normál adatbázisba magát a szöveget, hogy magát a szöveget a prompt gyártásához vissza tudjuk állítani.
Beletesszük a vektorokat a vektoradatbázisba, hogy meg tudjuk kérdezni, hogy melyik a releváns szövegdarabok egy adott kérdéshez.
Utána egy programból föl kell tudnunk tenni a kérdést az LLM-nek, standard interfészeket kell tudni programozni.
Végül a választ vissza kell tudni küldeni az ügyfélnek, felhasználónak, aki ezt el tudja olvasni.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;17-összegzés&quot;&gt;17. Összegzés&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;És ezzel a technológiával elő tudtunk állítani egy olyan alkalmazást, amelyikkel ugyanúgy lehet csetelni, mint a ChatGPT-vel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De nem csak a nagyvilág dolgait tudja egy adott időpillanatig, amikor is lezárták a tréningét, hanem tudja azokat a dolgokat is, amik a mi speciális tudásbázisunkban vannak benne.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Bevezetés</summary></entry><entry><title type="html">Tecnología LLM y RAG</title><link href="https://javax0.github.io/2024/07/22/llm-and-rag-es.html" rel="alternate" type="text/html" title="Tecnología LLM y RAG" /><published>2024-07-22T00:00:00+02:00</published><updated>2024-07-22T00:00:00+02:00</updated><id>https://javax0.github.io/2024/07/22/llm-and-rag-es</id><content type="html" xml:base="https://javax0.github.io/2024/07/22/llm-and-rag-es.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introducción&quot;&gt;1. Introducción&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Este artículo es una breve introducción a la tecnología LLM y RAG.
El artículo contiene muchas simplificaciones que las personas no especializadas pueden entender.
Si estás interesado en la tecnología con más detalle, este artículo no será suficiente. Puedes encontrar partes que no son completamente precisas, aunque transmiten bien la esencia.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-la-esencia-de-la-tecnología-rag&quot;&gt;2. La esencia de la tecnología RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;RAG es un acrónimo de Retrieval Augmented Generation (Generación Aumentada por Recuperación).
Es un acrónimo en inglés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Esta tecnología intenta complementar las aplicaciones LLM o Large Language Model (Modelo de Lenguaje Grande).
El objetivo es poder manejar bases de conocimiento e información que no se encuentran en el propio Modelo de Lenguaje Grande.
El Modelo de Lenguaje Grande es una red neuronal que ha sido entrenada de alguna manera.
Usualmente se entrenan con grandes cantidades de datos que están disponibles libremente en línea.
Como resultado, los Modelos de Lenguaje Grande pueden comunicarse de una manera casi humana.
Si les hacemos una pregunta, pueden responderla.
Sin embargo, necesitan aprender sobre qué datos o información existen dentro de una empresa, ya que estos no son datos públicos.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-limitaciones-de-los-llm&quot;&gt;3. Limitaciones de los LLM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Los LLM no pueden ser enseñados esta información corporativa en su forma actual.
Actualmente, las aplicaciones disponibles funcionan cuando los desarrolladores crean algunos modelos.
Luego, entrenan este modelo, estableciendo millones o miles de millones de parámetros con datos de entrenamiento.
Hacen preguntas, obtienen respuestas y luego ajustan estos parámetros basándose en la calidad de las respuestas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Por supuesto, hay programas y algoritmos para esto, no se hace a mano.
En las condiciones actuales, este proceso tarda unos meses en completarse utilizando los requisitos energéticos de una pequeña ciudad.
Ejecutan este algoritmo de ajuste fino en miles de máquinas.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-características-de-los-modelos-llm&quot;&gt;4. Características de los modelos LLM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cuando está listo, el modelo se puede descargar y ejecutar en tu máquina.
El modelo en sí representa 1-2 GB de datos.
Después de esto, esta red neuronal ya no cambia; no aprende cosas nuevas.
Solo puede aprender algo nuevo si obtenemos una nueva versión.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-aplicación-de-la-tecnología-rag&quot;&gt;5. Aplicación de la tecnología RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sin embargo, queremos usar este tipo de capacidad dentro de una empresa.
Queremos que esta red neuronal, el modelo LLM, dé una respuesta que tenga en cuenta la información interna de nuestra empresa cuando hacemos una pregunta.
Podemos hacer esto como si estuviéramos haciendo algo similar con humanos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si alguien viene a la empresa, y queremos hacerle preguntas sobre la empresa, pero no saben nada sobre nuestra empresa, primero les enseñamos cosas y les damos información.
Ellos pondrán esta información en su red neuronal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-principio-de-funcionamiento-de-rag&quot;&gt;6. Principio de funcionamiento de RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Podemos ver si se enfocan en el trabajo y olvidan todo lo demás cuando se van a casa, y mantienen esta información específica de la empresa en un lugar separado.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Este es el modelo para LLM y RAG también.
Ponemos la información que no está en la red neuronal del LLM por separado en una base de datos separada.
Si no por otra razón, no podemos ponerla en la base de datos de la red neuronal o en su modelo.
Estos son privados. No sabemos cómo se ven o cómo están estructurados, y no necesariamente son modificables en la forma en que están en el programa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No tenemos, podríamos decir, el &quot;código fuente&quot; de los datos - no necesariamente el código fuente del programa, sino la forma original de los datos.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-características-del-modelo-llm&quot;&gt;7. Características del modelo LLM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Este modelo se convierte en 1 GB a través de varios pasos y es un conjunto de datos relativamente pequeño.
Es relativo a lo que es pequeño, pero en términos de LLM, esto se considera pequeño.
Y no es seguro que todavía esté en un estado que pueda ser modificado.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-uso-de-bases-de-datos-vectoriales&quot;&gt;8. Uso de bases de datos vectoriales&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si queremos poner nuestra propia información en una base de datos separada, normalmente usamos una base de datos vectorial.
Una base de datos vectorial es una aplicación especial que puede determinar la distancia entre dos piezas de texto.
Entonces, ¿cuánto tratan sobre lo mismo y cuántas son las palabras clave exactas?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-preparación-de-la-base-de-conocimientos&quot;&gt;9. Preparación de la base de conocimientos&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cortamos la base de conocimientos disponible dentro de la empresa en piezas de texto.
Estas piezas de texto típicamente tienen mil caracteres o mil letras de largo y forman registros individuales.
Hay un poco de superposición entre ellos, así que no empezamos el siguiente donde terminó el anterior, sino un poco antes.
Esto es para tener contexto y continuidad en el texto.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-el-algoritmo-de-incrustación&quot;&gt;10. El algoritmo de incrustación&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ponemos cada una de estas piezas de texto en una base de datos y le pedimos a un algoritmo de incrustación que le asigne un vector.
El vector es una secuencia de números.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es similar a, por ejemplo, coordenadas GPS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Esencialmente, este vector es una coordenada espacial de este texto, pero este espacio no es tridimensional sino muy multidimensional.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-operación-rag-para-preguntas&quot;&gt;11. Operación RAG para preguntas&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cuando un usuario dirige una pregunta a una aplicación desarrollada con tecnología RAG, también vectorizamos esta pregunta.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le pedimos al sistema de incrustación que nos diga dónde se encuentra esta pregunta en el espacio.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luego, podemos preguntarle a la base de datos vectorial, en la que pusimos los vectores pertenecientes a todas nuestras piezas de texto, qué piezas de texto de nuestra base de conocimientos están más cerca en el espacio de la pregunta.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;12-cálculo-de-distancia-entre-vectores&quot;&gt;12. Cálculo de distancia entre vectores&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es un cálculo de distancia e indexación.
Si quieres, puedes calcular la distancia con el teorema de Pitágoras en un espacio vectorial ortogonal.
Aunque suena complicado, realmente no necesitamos ocuparnos de ello o saber cómo funciona.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;13-características-del-algoritmo-de-incrustación&quot;&gt;13. Características del algoritmo de incrustación&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;El punto es que este algoritmo de incrustación generalmente también se basa en una red neuronal.
También hay algoritmos de incrustación elementales, pero estos son prácticamente menos utilizables.
Hay sistemas de incrustación más complejos basados en redes neuronales que hacen esto, dependiendo del idioma.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;14-selección-de-piezas-de-texto-relevantes&quot;&gt;14. Selección de piezas de texto relevantes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La base de datos vectorial nos dice qué piezas de texto de nuestra base de conocimientos están cerca de la pregunta, lo que significa que son relevantes para responder la pregunta.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;15-ensamblaje-del-prompt&quot;&gt;15. Ensamblaje del prompt&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Después de esto, le pedimos al LLM un prompt que no es el original, sino que ponemos delante de él esas piezas de texto que extrajimos de nuestra propia base de conocimientos.
No podemos encajar todo en una sola pregunta porque sería demasiado, pero podemos incluir algunas, cinco, seis, siete o incluso diez de la base de conocimientos.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Escribimos en el prompt que este es un contexto, y queremos obtener la respuesta en este contexto, luego la pregunta en sí.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;16-resumen-del-proceso-rag&quot;&gt;16. Resumen del proceso RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luego, enviamos esto al algoritmo LLM, que lo lee, hace algo con él y lo responde.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Y esto es todo.
Todo el RAG es así de simple.
Necesitas una base de datos vectorial; necesitas cortar el texto.
Si alguien entiende de programación, sabe que esto no es gran cosa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Necesitamos poner el texto en una base de datos normal para poder restaurarlo para la generación de prompts.
Ponemos los vectores en la base de datos vectorial para poder preguntar cuáles son las piezas de texto relevantes para una pregunta dada.
Luego, necesitamos poder hacer preguntas al LLM desde un programa y programar interfaces estándar.
Finalmente, necesitamos poder enviar la respuesta de vuelta al cliente o usuario que puede leerla.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;17-resumen&quot;&gt;17. Resumen&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Con esta tecnología, producimos una aplicación con la que puedes chatear igual que con ChatGPT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pero sabe no solo las cosas del gran mundo hasta cierto punto en el tiempo cuando se cerró su entrenamiento, sino también las cosas en nuestra base de conocimientos especial.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introducción</summary></entry><entry><title type="html">LLM- und RAG-Technologie</title><link href="https://javax0.github.io/2024/07/22/llm-and-rag-de.html" rel="alternate" type="text/html" title="LLM- und RAG-Technologie" /><published>2024-07-22T00:00:00+02:00</published><updated>2024-07-22T00:00:00+02:00</updated><id>https://javax0.github.io/2024/07/22/llm-and-rag-de</id><content type="html" xml:base="https://javax0.github.io/2024/07/22/llm-and-rag-de.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-einleitung&quot;&gt;1. Einleitung&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieser Artikel ist eine kurze Einführung in die LLM- und RAG-Technologie.
Der Artikel enthält viele Vereinfachungen, die Laien verstehen können.
Wenn Sie sich für die Technologie im Detail interessieren, wird dieser Artikel nicht ausreichen. Sie werden möglicherweise Teile finden, die nicht ganz genau sind, obwohl sie das Wesentliche gut vermitteln.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-das-wesen-der-rag-technologie&quot;&gt;2. Das Wesen der RAG-Technologie&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;RAG ist ein Akronym für Retrieval Augmented Generation.
Es ist ein englisches Akronym.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Diese Technologie versucht, LLM- oder Large Language Model-Anwendungen zu ergänzen.
Das Ziel ist es, Wissensdatenbanken und Informationen behandeln zu können, die sich nicht im Large Language Model selbst befinden.
Das Large Language Model ist ein neuronales Netzwerk, das irgendwie trainiert wurde.
Sie werden normalerweise mit großen Mengen an Daten trainiert, die online frei verfügbar sind.
Infolgedessen können Large Language Models auf fast menschenähnliche Weise kommunizieren.
Wenn wir ihnen eine Frage stellen, können sie diese beantworten.
Sie müssen jedoch lernen, welche Daten oder Informationen innerhalb eines Unternehmens existieren, da es sich hierbei nicht um öffentliche Daten handelt.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-einschränkungen-von-llms&quot;&gt;3. Einschränkungen von LLMs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LLMs können diese Unternehmensinformationen in ihrer aktuellen Form nicht erlernen.
Derzeit funktionieren verfügbare Anwendungen so, dass Entwickler einige Modelle erstellen.
Dann trainieren sie dieses Modell, indem sie Millionen oder Milliarden von Parametern mit Trainingsdaten festlegen.
Sie stellen Fragen, erhalten Antworten und passen dann diese Parameter basierend auf der Qualität der Antworten an.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Natürlich gibt es dafür Programme und Algorithmen, nicht von Hand.
Unter den aktuellen Bedingungen dauert dieser Prozess einige Monate und verbraucht den Energiebedarf einer kleinen Stadt.
Sie führen diesen Feinabstimmungsalgorithmus auf Tausenden von Maschinen aus.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-eigenschaften-von-llm-modellen&quot;&gt;4. Eigenschaften von LLM-Modellen&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn es fertig ist, kann das Modell heruntergeladen und auf Ihrem Rechner ausgeführt werden.
Das Modell selbst repräsentiert 1-2 GB an Daten.
Danach ändert sich dieses neuronale Netzwerk nicht mehr; es lernt keine neuen Dinge.
Es kann nur etwas Neues lernen, wenn wir eine neue Version erhalten.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-anwendung-der-rag-technologie&quot;&gt;5. Anwendung der RAG-Technologie&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dennoch möchten wir diese Art von Fähigkeit innerhalb eines Unternehmens nutzen.
Wir möchten, dass dieses neuronale Netzwerk, das LLM-Modell, eine Antwort gibt, die die internen Informationen unseres Unternehmens berücksichtigt, wenn wir eine Frage stellen.
Wir können dies tun, als ob wir etwas Ähnliches mit Menschen machen würden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn jemand in das Unternehmen kommt und wir ihm Fragen über das Unternehmen stellen möchten, er aber nichts über unser Unternehmen weiß, bringen wir ihm zuerst Dinge bei und geben ihm Informationen.
Sie werden diese Informationen in ihr neuronales Netzwerk einfügen.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-funktionsprinzip-von-rag&quot;&gt;6. Funktionsprinzip von RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir können sehen, ob sie sich auf die Arbeit konzentrieren und alles andere vergessen, wenn sie nach Hause gehen, und sie diese unternehmensspezifischen Informationen an einem separaten Ort aufbewahren.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es ist das Modell für LLM und RAG gleichermaßen.
Wir legen die Informationen, die sich nicht in der neuronalen Netzwerkdatenbank des LLM befinden, separat in einer separaten Datenbank ab.
Wenn aus keinem anderen Grund, können wir es nicht in die Datenbank des neuronalen Netzwerks oder in sein Modell einfügen.
Diese sind privat. Wir wissen nicht, wie sie aussehen oder wie sie strukturiert sind, und sie sind nicht unbedingt in der Form, in der sie sich im Programm befinden, modifizierbar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir haben, könnte man sagen, nicht den &quot;Quellcode&quot; der Daten - nicht unbedingt den Quellcode des Programms, sondern die ursprüngliche Form der Daten.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-eigenschaften-des-llm-modells&quot;&gt;7. Eigenschaften des LLM-Modells&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dieses Modell wird durch mehrere Schritte zu 1 GB und ist ein relativ kleiner Datensatz.
Es ist relativ, was klein ist, aber in LLM-Begriffen wird dies als klein betrachtet.
Und es ist nicht sicher, ob es sich noch in einem Zustand befindet, der modifiziert werden kann.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-verwendung-von-vektordatenbanken&quot;&gt;8. Verwendung von Vektordatenbanken&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn wir unsere eigenen Informationen in eine separate Datenbank einfügen möchten, verwenden wir normalerweise eine Vektordatenbank.
Eine Vektordatenbank ist eine spezielle Anwendung, die den Abstand zwischen zwei Textstücken bestimmen kann.
Also wie viel geht es um das Gleiche und wie viele sind die exakten Schlüsselwörter?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-vorbereitung-der-wissensbasis&quot;&gt;9. Vorbereitung der Wissensbasis&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir zerschneiden die im Unternehmen verfügbare Wissensbasis in Textstücke.
Diese Textstücke sind typischerweise tausend Zeichen oder tausend Buchstaben lang und bilden einzelne Datensätze.
Es gibt eine kleine Überlappung zwischen ihnen, sodass wir den nächsten nicht dort beginnen, wo der vorherige endete, sondern etwas früher.
Dies geschieht, um Kontext und Kontinuität im Text zu haben.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-der-embedding-algorithmus&quot;&gt;10. Der Embedding-Algorithmus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir legen jedes dieser Textstücke in eine Datenbank und bitten einen Embedding-Algorithmus, ihm einen Vektor zuzuweisen.
Der Vektor ist eine Folge von Zahlen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es ist ähnlich wie zum Beispiel GPS-Koordinaten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Im Wesentlichen ist dieser Vektor eine räumliche Koordinate dieses Textes, aber dieser Raum ist nicht dreidimensional, sondern sehr mehrdimensional.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-rag-betrieb-für-fragen&quot;&gt;11. RAG-Betrieb für Fragen&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wenn ein Benutzer eine Frage an eine mit RAG-Technologie entwickelte Anwendung richtet, vektorisieren wir auch diese Frage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir bitten das Embedding-System, uns mitzuteilen, wo sich diese Frage im Raum befindet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dann können wir die Vektordatenbank, in die wir die zu allen unseren Textstücken gehörenden Vektoren eingefügt haben, fragen, welche Textstücke aus unserer Wissensbasis im Raum der Frage am nächsten sind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;12-distanzberechnung-zwischen-vektoren&quot;&gt;12. Distanzberechnung zwischen Vektoren&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Es handelt sich um eine Distanzberechnung und Indexierung.
Wenn Sie möchten, können Sie den Abstand mit dem Satz des Pythagoras in einem orthogonalen Vektorraum berechnen.
Obwohl es kompliziert klingt, müssen wir uns damit nicht wirklich befassen oder wissen, wie es funktioniert.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;13-eigenschaften-des-embedding-algorithmus&quot;&gt;13. Eigenschaften des Embedding-Algorithmus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Der Punkt ist, dass dieser Embedding-Algorithmus normalerweise auch auf einem neuronalen Netzwerk basiert.
Es gibt auch elementare Embedding-Algorithmen, aber diese sind praktisch weniger nutzbar.
Es gibt komplexere Embedding-Systeme, die auf neuronalen Netzwerken basieren und dies je nach Sprache tun.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;14-auswahl-relevanter-textstücke&quot;&gt;14. Auswahl relevanter Textstücke&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Die Vektordatenbank teilt uns mit, welche Textstücke aus unserer Wissensbasis der Frage nahe sind, was bedeutet, dass sie für die Beantwortung der Frage relevant sind.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;15-zusammenstellung-des-prompts&quot;&gt;15. Zusammenstellung des Prompts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Danach bitten wir das LLM um einen Prompt, der nicht das Original ist, sondern wir stellen ihm die Textstücke voran, die wir aus unserer eigenen Wissensbasis extrahiert haben.
Wir können nicht das Ganze in eine Frage packen, weil es zu viel wäre, aber wir können einige, fünf, sechs, sieben oder sogar zehn aus der Wissensbasis einbeziehen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir schreiben in den Prompt, dass dies ein Kontext ist, und wir möchten die Antwort in diesem Kontext erhalten, dann die Frage selbst.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;16-zusammenfassung-des-rag-prozesses&quot;&gt;16. Zusammenfassung des RAG-Prozesses&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dann senden wir dies an den LLM-Algorithmus, der es liest, etwas damit macht und es beantwortet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Und das ist es.
Der ganze RAG ist so einfach.
Man braucht eine Vektordatenbank; man muss den Text zerschneiden.
Wenn jemand Programmierung versteht, weiß er, dass dies keine große Sache ist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wir müssen den Text in eine normale Datenbank einfügen, damit wir ihn für die Prompt-Generierung wiederherstellen können.
Wir legen die Vektoren in die Vektordatenbank, damit wir fragen können, welche die relevanten Textstücke für eine bestimmte Frage sind.
Dann müssen wir in der Lage sein, dem LLM Fragen aus einem Programm zu stellen und Standardschnittstellen zu programmieren.
Schließlich müssen wir in der Lage sein, die Antwort an den Kunden oder Benutzer zurückzusenden, der sie lesen kann.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;17-zusammenfassung&quot;&gt;17. Zusammenfassung&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mit dieser Technologie haben wir eine Anwendung erstellt, mit der man genauso chatten kann wie mit ChatGPT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aber sie kennt nicht nur die Dinge der großen Welt bis zu einem bestimmten Zeitpunkt, als ihr Training abgeschlossen wurde, sondern auch die Dinge in unserer speziellen Wissensbasis.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Einleitung</summary></entry><entry><title type="html">LLM and RAG technology</title><link href="https://javax0.github.io/2024/07/22/llm-and-rag.html" rel="alternate" type="text/html" title="LLM and RAG technology" /><published>2024-07-22T00:00:00+02:00</published><updated>2024-07-22T00:00:00+02:00</updated><id>https://javax0.github.io/2024/07/22/llm-and-rag</id><content type="html" xml:base="https://javax0.github.io/2024/07/22/llm-and-rag.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This article is a brief introduction to LLM and RAG technology.
The article contains many simplifications that laypeople can understand.
If you&amp;#8217;re interested in the technology in more detail, this article won&amp;#8217;t be enough. You may find parts that aren&amp;#8217;t entirely accurate, although they convey the essence well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-the-essence-of-rag-technology&quot;&gt;2. The essence of RAG technology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;RAG is an acronym for Retrieval Augmented Generation.
It is an English acronym.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This technology tries to complement LLM or Large Language Model applications.
The goal is to be able to handle knowledge bases and information that are not found in the Large Language Model itself.
The Large Language Model is a neural network that has been trained somehow.
They are usually trained with large quantities of data that are freely available online.
As a result, Large Language Models can communicate in an almost human-like manner.
If we ask them a question, they can answer it.
However, they need to learn about what data or information exists within a company, as these are not public data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-limitations-of-llms&quot;&gt;3. Limitations of LLMs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LLMs cannot be taught this corporate information in their current form.
Currently, available applications work by developers creating some models.
Then, they train this model, setting millions or billions of parameters with training data.
They ask questions, get answers, and then adjust these parameters based on the quality of the answers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, there are programs and algorithms for this, not by hand.
Under current conditions, this process takes a few months to complete using the energy requirements of a small city.
They run this fine-tuning algorithm on thousands of machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-characteristics-of-llm-models&quot;&gt;4. Characteristics of LLM models&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When done, the model can be downloaded and run on your machine.
The model itself represents 1-2 GB of data.
After this, this neural network no longer changes; it doesn&amp;#8217;t learn new things.
It can only learn something new if we get a new version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-application-of-rag-technology&quot;&gt;5. Application of RAG technology&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Yet we want to use this kind of capability within a company.
We want this neural network, the LLM model, to give an answer that takes into account our company&amp;#8217;s internal information when we ask a question.
We can do this as if we were doing something similar with humans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If someone comes to the company, and we want to ask them questions about the company, but they don&amp;#8217;t know anything about our company, we first teach them things and give them information.
They will put this information into their neural network.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-operating-principle-of-rag&quot;&gt;6. Operating principle of RAG&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see if they focus on work and forget everything else when they go home, and they keep this company-specific information in a separate place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is the model for LLM and RAG as well.
We put the information that isn&amp;#8217;t in the LLM&amp;#8217;s neural network separately in a separate database.
If for no other reason, we can&amp;#8217;t put it into the neural network&amp;#8217;s database or into its model.
These are private. We don&amp;#8217;t know what they look like or how they&amp;#8217;re structured, and they&amp;#8217;re not necessarily modifiable in the form they&amp;#8217;re in the program.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We don&amp;#8217;t have, we might say, the &quot;source code&quot; of the data - not necessarily the program&amp;#8217;s source code, but the original form of the data.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-characteristics-of-the-llm-model&quot;&gt;7. Characteristics of the LLM model&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This model becomes 1 GB through several steps and is a relatively small data set.
It&amp;#8217;s relative to what&amp;#8217;s small, but in LLM terms, this is considered small.
And it&amp;#8217;s not sure it&amp;#8217;s still in a state that can be modified.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;8-use-of-vector-databases&quot;&gt;8. Use of vector databases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to put our own information into a separate database, we usually use a vector database.
A vector database is a special application that can determine the distance between two pieces of text.
So how much are they about the same thing, and how many are the exact keywords?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;9-preparing-the-knowledge-base&quot;&gt;9. Preparing the knowledge base&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We cut up the knowledge base available within the company into pieces of text.
These pieces of text are typically a thousand characters or a thousand letters long and form individual records.
There&amp;#8217;s a little overlap between them, so we don&amp;#8217;t start the next one where the previous one ended, but a little earlier.
It is to have context and continuity in the text.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;10-the-embedding-algorithm&quot;&gt;10. The embedding algorithm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We put each of these pieces of text into a database and ask an embedding algorithm to assign it a vector.
The vector is a sequence of numbers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is similar to, for example, GPS coordinates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essentially, this vector is a spatial coordinate of this text, but this space is not three-dimensional but very multi-dimensional.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;11-rag-operation-for-questions&quot;&gt;11. RAG operation for questions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a user addresses a question to an application developed with RAG technology, we also vectorize this question.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We ask the embedding system to tell us where this question is located in space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, we can ask the vector database, into which we put the vectors belonging to all our text pieces, which text pieces from our knowledge base are closest in space to the question.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;12-distance-calculation-between-vectors&quot;&gt;12. Distance calculation between vectors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is a distance calculation and indexing.
If you like, you can calculate the distance with the Pythagorean theorem in an orthogonal vector space.
Although it sounds complicated, we don&amp;#8217;t really need to deal with it or know how it works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;13-characteristics-of-the-embedding-algorithm&quot;&gt;13. Characteristics of the embedding algorithm&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The point is that this embedding algorithm is usually based on a neural network as well.
There are elementary embedding algorithms, too, but these are practically less usable.
There are more complex embedding systems based on neural networks that do this, depending on the language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;14-selection-of-relevant-text-pieces&quot;&gt;14. Selection of relevant text pieces&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The vector database tells us which text pieces from our knowledge base are close to the question, meaning they are relevant to answering the question.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;15-assembling-the-prompt&quot;&gt;15. Assembling the prompt&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After this, we ask the LLM for a prompt that is not the original, but we put in front of it those pieces of text we extracted from our own knowledge base.
We can&amp;#8217;t fit the whole thing into one question because it would be too much, but we can include a few, five, six, seven, or even ten from the knowledge base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We write in the prompt that this is a context, and we want to get the answer in this context, then the question itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;16-summary-of-the-rag-process&quot;&gt;16. Summary of the RAG process&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, we send this to the LLM algorithm, which reads it, does something with it, and answers it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And this is it.
The whole RAG is that simple.
You need a vector database; you need to cut up the text.
If someone understands programming, they know this is not a big deal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We need to put the text into a normal database so that we can restore it for prompt generation.
We put the vectors into the vector database so that we can ask which are the relevant text pieces for a given question.
Then, we need to be able to ask the LLM questions from a program and program standard interfaces.
Finally, we need to be able to send the answer back to the client or user who can read it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;17-summary&quot;&gt;17. Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this technology, we produced an application that you can chat with just like ChatGPT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But it knows not only the things of the big world up to a certain point in time when its training was closed but also the things in our special knowledge base.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Threaded streams</title><link href="https://javax0.github.io/2024/02/29/threaded-stream.html" rel="alternate" type="text/html" title="Threaded streams" /><published>2024-02-29T00:00:00+01:00</published><updated>2024-02-29T00:00:00+01:00</updated><id>https://javax0.github.io/2024/02/29/threaded-stream</id><content type="html" xml:base="https://javax0.github.io/2024/02/29/threaded-stream.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the landscape of software development, efficiently processing large datasets has become paramount, especially with the advent of multicore processors.
The Java Stream interface provided a leap forward by enabling sequential and parallel operations on collections.
However, fully exploiting modern processors&apos; capabilities while retaining the Stream API&amp;#8217;s simplicity posed a challenge.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Responding to this, I created an open-source library aimed at experimenting with a new method of parallelizing stream operations.
This library diverges from traditional batching methods by processing each stream element in its own virtual thread, offering a more refined level of parallelism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will talk about the library, and its design.
It is more detail than you need simply to use the library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The library is available on GitHub at &lt;a href=&quot;https://github.com/verhas/vtstream&quot; class=&quot;bare&quot;&gt;https://github.com/verhas/vtstream&lt;/a&gt; and also as a dependency in Maven Central.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.github.verhas&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;vtstream&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check out the actual version number on the Maven Central site or on GitHub.
This article is based on the version 1.0.1 of the library.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-parallel-computing&quot;&gt;2. Parallel Computing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parallel computing is not a new thing.
It has been around for decades.
The first computers were executing tasks in batches, hence in a serial way, but soon the idea of time-sharing came into picture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first time-sharing computer system was installed in 1961 at the Massachusetts Institute of Technology (MIT).
This system, known as the Compatible Time-Sharing System (CTSS), allowed multiple users to log into a mainframe computer simultaneously, working in what appeared to be a private session.
CTSS was a groundbreaking development in computer science, laying the foundation for modern operating systems and computing environments that support multitasking and multi-user operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was not a parallel computing system, per se.
CTSS was designed to run on a single mainframe computer, the IBM 7094, at MIT.
It has one CPU, thus the code was executed in a serial way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today we have multicore processors and multiple processors in a single computer.
I edit this article on a computer that has 10 processor cores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To execute tasks concurrently, there are two plus one approaches:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;define the algorithm in a concurrent way, for example, reactive programming, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;define the algorithm the good old sequential way and let some program decide on the concurrency, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mix the two.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we&amp;#8217;re programming some reactive algorithm, or defined streams as in Java 8 stream, we help the application to execute the tasks concurrently.
We define small parts and their interdependence so that the environment can decide which parts can be executed concurrently.
The actual execution is done by the framework and when we are using&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;virtual threads, or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;threads (perhaps processes)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the difference is in the scheduler.
Who makes the decision which processor should execute which task the next moment.
In the case of threads or processes, the executor is the operating system.
The difference between the thread and process execution is that threads belonging to the same process share the same memory space.
Processes have their own memory space.
Similarly, virtual threads belonging to the same operating system thread share the same stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Transitioning from processes to virtual threads, we encounter a reduction in shared resources and, consequently, overhead.
This makes virtual threads significantly less costly compared to traditional threads.
While a machine might support thousands of threads and processes, it can accommodate millions of virtual threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In defining a task with streams, you are essentially outlining a series of operations to be performed on multiple elements.
The decision to execute these operations concurrently rests with the framework, which may or may not choose to do so.
However, &lt;code&gt;Stream&lt;/code&gt; in Java serves as a high-level interface, offering us the flexibility to implement a version that facilitates concurrent execution of tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-implementing-streams-in-threads&quot;&gt;3. Implementing Streams in Threads&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The library contains two primary classes located in the main directory, namely:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ThreadedStream&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;ThreadedStream&lt;/code&gt; is the class responsible for implementing the &lt;code&gt;Stream&lt;/code&gt; interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class ThreadedStream&amp;lt;T&amp;gt; implements Stream&amp;lt;T&amp;gt; {&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Command&lt;/code&gt; class encompasses nested classes that implement functionality for stream operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public static class Filter&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class AnyMatch&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class FindFirst&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class FindAny&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class NoOp&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class Distinct&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class Skip&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class Peek&amp;lt;T&amp;gt; extends Command&amp;lt;T, T&amp;gt; {
    public static class Map&amp;lt;T, R&amp;gt; extends Command&amp;lt;T, R&amp;gt; {&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the mentioned operators are intermediary.
The terminal operators are implemented within the &lt;code&gt;ThreadedStream&lt;/code&gt; class, which converts the threaded stream into a regular stream before invoking the terminal operator on this stream.
An example of this approach is the implementation of the &lt;code&gt;collect&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    @Override
    public &amp;lt;R&amp;gt; R collect(Supplier&amp;lt;R&amp;gt; supplier, BiConsumer&amp;lt;R, ? super T&amp;gt; accumulator, BiConsumer&amp;lt;R, R&amp;gt; combiner) {
        return toStream().collect(supplier, accumulator, combiner);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The source of the elements is also a stream, which means that the threading functionality is layered atop the existing stream implementation.
This setup allows for the utilization of streams both as data sources and as destinations for processed data.
Threading occurs in the interim, facilitating the parallel execution of intermediary commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Therefore, the core of the implementation—and its most intriguing aspect—lies in the construction of the structure and its subsequent execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will first examine the structure of the stream data and then explore how the class executes operations utilizing virtual threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-1-stream-data-structure&quot;&gt;3.1. Stream Data Structure&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ThreadedStream&lt;/code&gt; class maintains its data through the following member variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private final Command&amp;lt;Object, T&amp;gt; command;
    private final ThreadedStream&amp;lt;?&amp;gt; downstream;
    private final Stream&amp;lt;?&amp;gt; source;
    private long limit = -1;
    private boolean chained = false;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;command&lt;/code&gt; represents the &lt;code&gt;Command&lt;/code&gt; object to be executed on the data.
It might be a no-operation (NoOp) command or &lt;code&gt;null&lt;/code&gt; if there is no specific command to execute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;downstream&lt;/code&gt; variable points to the preceding &lt;code&gt;ThreadedStream&lt;/code&gt; in the processing chain.
A &lt;code&gt;ThreadedStream&lt;/code&gt; retrieves data either from the immediate &lt;code&gt;downstream&lt;/code&gt; stream, if available, or directly from the &lt;code&gt;source&lt;/code&gt; if it&amp;#8217;s the initial in the chain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;source&lt;/code&gt; is the initial data stream.
It remains defined even when a &lt;code&gt;downstream&lt;/code&gt; is specified, in which scenario the &lt;code&gt;source&lt;/code&gt; for both streams remains identical.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;limit&lt;/code&gt; specifies the maximum number of elements this stream is configured to process.
Implementing a limit requires a workaround, as stream element processing starts immediately rather than being &quot;pulled&quot; by the terminal operation.
Consequently, infinite streams cannot feed into a &lt;code&gt;ThreadedStream&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chained&lt;/code&gt; is a boolean flag indicating whether the stream is part of a processing chain.
When &lt;code&gt;true&lt;/code&gt;, it signifies that there is a subsequent stream dependent on this one&amp;#8217;s output, preventing execution in cases of processing forks.
This mechanism mirrors the approach found in JVM&amp;#8217;s standard stream implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-2-stream-build&quot;&gt;3.2. Stream Build&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The stream data structure is constructed dynamically as intermediary operations are chained together.
The initiation of this process begins with the creation of a starting element, achieved by invoking the static method &lt;code&gt;threaded&lt;/code&gt; on the &lt;code&gt;ThreadedStream&lt;/code&gt; class.
An exemplary line from the unit tests illustrates this initiation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        final var k = ThreadedStream.threaded(Stream.of(1, 2, 3));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This line demonstrates the creation of a &lt;code&gt;ThreadedStream&lt;/code&gt; instance named &lt;code&gt;k&lt;/code&gt;, initialized with a source stream consisting of the elements 1, 2, and 3.
The &lt;code&gt;threaded&lt;/code&gt; method serves as the entry point for transforming a regular stream into a &lt;code&gt;ThreadedStream&lt;/code&gt;, setting the stage for further operations that can leverage virtual threads for concurrent execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When an intermediary operation is appended, it results in the creation of a new &lt;code&gt;ThreadedStream&lt;/code&gt; instance.
This new instance designates the preceding &lt;code&gt;ThreadedStream&lt;/code&gt; as its &lt;code&gt;downstream&lt;/code&gt;.
Moreover, the source stream for this newly formed &lt;code&gt;ThreadedStream&lt;/code&gt; remains identical to the source stream of its predecessor.
This design ensures a seamless flow of data through the chain of operations, facilitating efficient processing in a concurrent environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, when we call&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        final var t = k.map(x -&amp;gt; x * 2);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;the &lt;code&gt;map&lt;/code&gt; method is called, which is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public &amp;lt;R&amp;gt; ThreadedStream&amp;lt;R&amp;gt; map(Function&amp;lt;? super T, ? extends R&amp;gt; mapper) {
        return new ThreadedStream&amp;lt;&amp;gt;(new Command.Map&amp;lt;&amp;gt;(mapper), this);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It generates a new &lt;code&gt;ThreadedStream&lt;/code&gt; object wherein the preceding &lt;code&gt;ThreadedStream&lt;/code&gt; acts as the &lt;code&gt;downstream&lt;/code&gt;.
Additionally, the &lt;code&gt;command&lt;/code&gt; field is populated with a new instance of the &lt;code&gt;Command&lt;/code&gt; class, configured with the specified mapper function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This process effectively constructs a linked list composed of &lt;code&gt;ThreadedStream&lt;/code&gt; objects.
This linked structure comes into play during the execution phase, triggered by invoking one of the terminal operations on the stream.
This method ensures that each &lt;code&gt;ThreadedStream&lt;/code&gt; in the sequence can process data in a manner that supports concurrent execution, leveraging the capabilities of virtual threads for efficient data processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s crucial to understand that the &lt;code&gt;ThreadedStream&lt;/code&gt; class refrains from performing any operations on the data until a terminal operation is called.
Once execution commences, it proceeds concurrently.
To facilitate independent execution of these operations, &lt;code&gt;ThreadedStream&lt;/code&gt; instances are designed to be immutable.
They are instantiated during the setup phase and undergo a single mutation when they are linked together.
During execution, these instances serve as a read-only data structure, guiding the flow of operation execution.
This immutability ensures thread safety and consistency throughout concurrent processing, allowing for efficient and reliable stream handling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-3-stream-execution&quot;&gt;3.3. Stream Execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The commencement of stream execution is triggered by invoking a terminal operation.
These terminal operations are executed by first transforming the threaded stream back into a conventional stream, upon which the terminal operation is then performed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;collect&lt;/code&gt; method serves as a prime example of this process, as previously mentioned.
This method is emblematic of how terminal operations are seamlessly integrated within the &lt;code&gt;ThreadedStream&lt;/code&gt; framework, bridging the gap between concurrent execution facilitated by virtual threads and the conventional stream processing model of Java.
By converting the &lt;code&gt;ThreadedStream&lt;/code&gt; into a standard &lt;code&gt;Stream&lt;/code&gt;, it leverages the rich ecosystem of terminal operations already available in Java, ensuring compatibility and extending functionality with minimal overhead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    @Override
    public &amp;lt;R&amp;gt; R collect(Supplier&amp;lt;R&amp;gt; supplier, BiConsumer&amp;lt;R, ? super T&amp;gt; accumulator, BiConsumer&amp;lt;R, R&amp;gt; combiner) {
        return toStream().collect(supplier, accumulator, combiner);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;toStream()&lt;/code&gt; method represents the core functionality of the library, marking the commencement of stream execution by initiating a new virtual thread for each element in the source stream.
This method differentiates between ordered and unordered execution through two distinct implementations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;toUnorderedStream()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;toOrderedStream()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The choice between these methods is determined by the &lt;code&gt;isParallel()&lt;/code&gt; status of the source stream.
It&amp;#8217;s worth noting that executing an ordered stream in parallel can be advantageous.
Although the results may be produced out of order, parallel processing accelerates the operation.
Ultimately, care must be taken to collect the results in a sequential manner, despite the unordered processing potentially yielding higher efficiency by allowing elements to be passed to the resulting stream as soon as they become available, eliminating the need to wait for the preceding elements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation of &lt;code&gt;toStream()&lt;/code&gt; is designed to minimize an unnecessary collection of elements.
Elements are forwarded to the resulting stream immediately upon readiness in the case of unordered streams, and in sequence upon the readiness and previous element&amp;#8217;s forwarding in ordered streams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In subsequent sections, we delve into the specifics of these two execution methodologies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-4-unordered-stream-execution&quot;&gt;3.4. Unordered Stream Execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unordered execution promptly forwards results as they become prepared.
This approach employs a concurrent list for result storage, facilitating simultaneous result deposition by threads and retrieval by the target stream, preventing excessive list growth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The iteration over the source stream initiates the creation of a new virtual thread for each element.
When a limit is imposed, it&amp;#8217;s applied directly on the source stream, diverging from traditional stream implementations where &lt;code&gt;limit&lt;/code&gt; acts as a genuine intermediary operation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The implementation of the unordered stream execution is as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private Stream&amp;lt;T&amp;gt; toUnorderedStream() {
        final var result = Collections.synchronizedList(new LinkedList&amp;lt;Command.Result&amp;lt;T&amp;gt;&amp;gt;());
        final AtomicInteger n = new AtomicInteger(0);
        final Stream&amp;lt;?&amp;gt; limitedSource = limit &amp;gt;= 0 ? source.limit(limit) : source;
        limitedSource.forEach(
                t -&amp;gt; {
                    Thread.startVirtualThread(() -&amp;gt; result.add(calculate(t)));
                    n.incrementAndGet();
                });
        return IntStream.range(0, n.get())
                .mapToObj(i -&amp;gt; {
                    while (result.isEmpty()) {
                        Thread.yield();
                    }
                    return result.removeFirst();
                })
                .filter(f -&amp;gt; !f.isDeleted())
                .peek(r -&amp;gt; {
                    if (r.exception() != null) {
                        throw new ThreadExecutionException(r.exception());
                    }
                })
                .map(Command.Result::result);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The counter &lt;code&gt;n&lt;/code&gt; is utilized to tally the number of threads initiated.
The resulting stream is constructed using this counter by mapping the numbers 0 to &lt;code&gt;n&lt;/code&gt;-1 to the elements of the concurrent list as they become ready.
If the list lacks elements at any point, the process pauses, awaiting the availability of the next element.
This waiting mechanism is implemented within a loop that incorporates a &lt;code&gt;yield&lt;/code&gt; call to prevent unnecessary CPU consumption by halting the loop&amp;#8217;s execution until it&amp;#8217;s necessary to proceed.
This efficient use of resources ensures that the system remains responsive and minimizes the potential for performance degradation during the execution of parallel tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;3-5-ordered-stream-execution&quot;&gt;3.5. Ordered Stream Execution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ordered stream execution introduces a more nuanced approach compared to its unordered counterpart.
It incorporates a local class named &lt;code&gt;Task&lt;/code&gt;, designed specifically to await the readiness of a particular thread.
Similar to the unordered execution, a concurrent list is utilized, but with a key distinction: the elements of this list are the tasks themselves, rather than the results.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This list is populated by the code responsible for thread creation, rather than by the threads themselves.
The presence of a fully populated list eliminates the need for a separate counter to track thread initiation.
Consequently, the process transitions to sequentially waiting on each thread as dictated by their order in the list, thereby ensuring that each thread&amp;#8217;s output is relayed to the target stream in a sequential manner.
This method meticulously maintains the ordered integrity of the stream&amp;#8217;s elements, despite the concurrent nature of their processing, by aligning the execution flow with the sequence of the original stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    private Stream&amp;lt;T&amp;gt; toOrderedStream() {
        class Task {
            Thread workerThread;
            volatile Command.Result&amp;lt;T&amp;gt; result;

            /**
             * Wait for the thread calculating the result of the task to be finished. This method is blocking.
             * @param task the task to wait for
             */
            static void waitForResult(Task task) {
                try {
                    task.workerThread.join();
                } catch (InterruptedException e) {
                    task.result = deleted();
                }
            }
        }
        final var tasks = Collections.synchronizedList(new LinkedList&amp;lt;Task&amp;gt;());

        final Stream&amp;lt;?&amp;gt; limitedSource = limit &amp;gt;= 0 ? source.limit(limit) : source;
        limitedSource.forEach(
                sourceItem -&amp;gt; {
                    Task task = new Task();
                    tasks.add(task);
                    task.workerThread = Thread.startVirtualThread(() -&amp;gt; task.result = calculate(sourceItem));
                }
        );

        return tasks.stream()
                .peek(Task::waitForResult)
                .map(f -&amp;gt; f.result)
                .peek(r -&amp;gt; {
                            if (r.exception() != null) {
                                throw new ThreadExecutionException(r.exception());
                            }
                        }
                )
                .filter(r -&amp;gt; !r.isDeleted()).map(Command.Result::result);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-summary-and-takeaway&quot;&gt;4. Summary and Takeaway&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Having explored an implementation that facilitates the parallel execution of stream operations, it&amp;#8217;s noteworthy that this library is open source, offering you the flexibility to either utilize it as is or reference its design and implementation to craft your own version.
The detailed exposition provided here aims to shed light on both the conceptual underpinnings and practical aspects of the library&amp;#8217;s construction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, it&amp;#8217;s important to acknowledge that the library has not undergone extensive testing.
It received a review from Istvan Kovacs, a figure with considerable expertise in concurrent programming.
Despite this, his review does not serve as an absolute assurance of the library&amp;#8217;s reliability and absence of bugs.
Consequently, should you decide to integrate this library into your projects, it&amp;#8217;s advised to proceed with caution and conduct thorough testing to ensure it meets your requirements and standards.
The library is provided &quot;as is,&quot; with the understanding that users adopt it at their own risk, underpinning the importance of due diligence in its deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry><entry><title type="html">Cloud Solutions are Expensive, or are they?</title><link href="https://javax0.github.io/2023/11/12/cloud-price.html" rel="alternate" type="text/html" title="Cloud Solutions are Expensive, or are they?" /><published>2023-11-12T00:00:00+01:00</published><updated>2023-11-12T00:00:00+01:00</updated><id>https://javax0.github.io/2023/11/12/cloud-price</id><content type="html" xml:base="https://javax0.github.io/2023/11/12/cloud-price.html">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cloud solutions are becoming increasingly prevalent.
I&amp;#8217;ve observed their adoption even among companies that were traditionally very conservative.
Previously, these organizations insisted that no data leave their premises, operating all applications within data centers safeguarded by two-meter-thick, steel-reinforced concrete walls.
However, these companies are now beginning to explore and adopt cloud solutions, simultaneously becoming aware of the true costs associated with cloud computing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this article, I will delve into the costs associated with cloud solutions.
While this is not a technical piece, a basic understanding of cloud computing might be beneficial, though I will aim to provide an overview rather than delve into technical specifics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, those with a background in economics might find this discussion particularly insightful, as we will be exploring the costs, prices, and the underlying structures that influence them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As the author of this article, I bring a unique perspective, combining my experience as a senior software architect with my educational background, holding an MBA degree and possessing a foundational understanding of economics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;2-the-price-of-cloud&quot;&gt;2. The price of cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Companies that perceive cloud solutions as expensive have valid concerns.
Utilizing cloud services comes with a cost, and given that pricing is typically based on usage, expenses can escalate quickly.
If your company already possesses servers on-premises or hosted in a data center, maintaining these setups might be more cost-effective than transitioning to the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are specific scenarios where the cost factor makes cloud usage less favorable.
Conversely, there are also situations where opting for a cloud solution can be highly advantageous.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s examine an example to illustrate this point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;2-1-architecture-test&quot;&gt;2.1. Architecture test&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a project we undertook, we proposed a unique solution involving a JDBC proxy for a client.
This JDBC proxy was a special application that acted like a database server.
However, instead of storing data itself, it forwarded SQL queries to multiple, different database servers.
This setup was necessary because the application required data to be inserted into different databases during a multi-year database migration.
The client requested a proof of concept, necessitating a test environment with six Linux servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Renting these servers was not only costly but also challenging, given our location in a small country in Central Europe.
While purchasing servers was standard, acquiring them for just a few days was an unusual requirement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eventually, we approached a company where we knew the director and proposed a unique arrangement during a &quot;lunch&quot; meeting:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We need six servers for a few days.
I know you always ship servers to your customers.
Can we rent them for a few days?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We do not rent servers.
We sell them.
Also, our delivery line is always on pressure, as soon as the servers come in, we install them and ship them out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do you ship them also during the weekends?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No, of course not, our client offices are closed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So if you have six servers that arrive on Friday, you will not ship them until Monday?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yes.
That is correct.
To be more precise, we will ship them only on Tuesday, because we have to install them on Monday.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How about we take them for the weekend, we do the testing, and you get them back installed early Monday?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This arrangement was a win-win, but it relied heavily on our business network and negotiating skills.
Without this connection, we would have faced significant costs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today the solution would be much simpler and cost-effective:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You would specify the required hardware using YAML format, register with a cloud provider, start up a Kubernetes (K8s) cluster, upload the objects, and have your servers ready.
This overlooks the minor details of containers and applications, but these are relatively straightforward.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My estimate is that the total cost for this modern setup would be around or less than $50. In contrast, the official quote we received for a weekend rental of six servers from a large company at that time was around $3,000.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This scenario clearly demonstrates the cost-effectiveness and convenience of cloud solutions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3-the-economy-of-the-cloud&quot;&gt;3. The economy of the cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are indeed specific costs that influence the pricing of cloud solutions.
A cloud provider incurs expenses for hardware, electricity, cooling systems, network infrastructure, data center facilities, as well as salaries for personnel who install, maintain the hardware, and develop the software that operates the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The notion that &quot;all these costs are included in the price you pay for the cloud&quot; encapsulates a common perception.
This sentence between the quotes was suggested by GitHub Copilot.
This fact, the suggestion reflects what many people believe about costs.
I have encountered this mindset frequently across various social media platforms and in diverse groups.
It underscores a general misunderstanding that the fees paid depend on the underlying expenses associated with providing the services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The price does not come from the costs.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The pricing of products and services, including cloud solutions, is indeed influenced by costs, but it is not solely determined by them.
Costs limit the price, as we will see shortly.
The primary drivers of price are demand and supply.
Essentially, clients are willing to pay a price that they deem worthwhile for the service or product they receive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the price that customers are willing to pay falls below the cost of providing the service or product, suppliers typically will not offer it.
This economic principle highlights the balance that must be struck in the market: prices need to be high enough to cover costs and generate a profit for suppliers, yet remain low enough to be acceptable to consumers.
This dynamic equilibrium is a fundamental aspect of market economics and is particularly relevant in the context of cloud computing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When you begin studying economics, you&amp;#8217;re introduced to a basic market model where price is often viewed as a function of supply and demand.
However, in practical scenarios, pricing is commonly calculated with consideration to costs.
For instance, when you have your car repaired, the bill typically itemizes the costs of parts and labor.
Yet, in economic terms, such a bill doesn&amp;#8217;t fully represent the truth.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The prices listed for parts and labor often include an &quot;uplift&quot; – a markup that covers additional expenses and profit.
This markup is a standard practice in business; it&amp;#8217;s a way of communicating and playing the game within the market.
The invoice you receive doesn&amp;#8217;t usually break down every cost component, such as office heating, electricity, or even indirect costs like a bribe paid to a security inspector.
Moreover, the profit margin, which can be seen as the cost of the money invested, is also embedded in these prices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This practice is akin to a card game where all players understand that some level of strategy – or &quot;cheating,&quot; in this metaphor – is part of the game.
If everyone is aware of and engages in these strategies, it becomes a level playing field.
Similarly, in business, while the invoice might not explicitly list every cost or the exact profit margin, there&amp;#8217;s an understanding that these elements are inherently included in the prices charged.
This system of pricing, while not always transparent, is a fundamental aspect of how businesses operate and cover their costs while earning a profit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When prices in a market are heavily influenced by costs, it typically indicates a highly competitive environment.
However, the fundamental economic principle of price being driven by supply and demand still holds true.
In such markets, there&amp;#8217;s often a dynamic feedback loop that affects supply.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If a particular service or product can be sold with a high profit margin, it naturally attracts more suppliers who want to capitalize on this opportunity.
This influx of suppliers increases the supply, which, over time, can lead to a decrease in prices until the profit margin aligns more closely with the cost of market entry and investment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, entering a market isn&amp;#8217;t always straightforward or quick.
During the period it takes for new suppliers to establish themselves, existing suppliers may enjoy a monopolistic or oligopolistic position.
In such scenarios, these incumbent suppliers have the leverage to set prices at a level that maximizes their profits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is notably evident in the cloud computing industry.
In my opinion, cloud providers are in an oligopolistic situation.
The market is dominated by a few major players, and their significant presence and control allow them to influence pricing.
This oligopolistic market structure enables these providers to set prices that are not just cost-driven but also strategically aligned with maximizing their profits, considering the competitive landscape and the value they offer to their customers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;4-is-the-price-right-for-you&quot;&gt;4. Is the price right for you?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The crucial question regarding cloud solutions is whether the price is right for you and your organization.
The company financial situation may affect the decisions greatly.
Is the investment in cloud services worth it for your specific needs and circumstances?
If the answer is yes, then by definition, the service is not expensive for you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When making this decision, it&amp;#8217;s important to weigh numerous factors in comparing on-premises solutions to cloud-based ones.
One key consideration is the nature of the expenditure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operating Expense (OPEX):&lt;/strong&gt; When you use cloud services, the costs are typically classified as operating expenses.
This means you pay for the cloud services as you use them, which can be beneficial for cash flow and can often be deducted as expenses in the fiscal year they are incurred.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Capital Expenditure (CAPEX):&lt;/strong&gt; On the other hand, investing in hardware and setting up your own data center involves capital expenditure.
This means a significant upfront investment, which is then depreciated over several years.
CAPEX can have different tax and financial implications compared to OPEX.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your decision might also be influenced by how you want to manage your company&amp;#8217;s finances.
Are you looking to optimize your expenditures for company valuation or for tax purposes?
The financial situation of your company can greatly impact this decision.
For instance, if preserving cash is crucial, OPEX might be more attractive.
Conversely, if long-term investment and asset building are priorities, CAPEX could be the better route.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ultimately, the decision between cloud services and on-premises solutions isn&amp;#8217;t just about the technology.
It&amp;#8217;s also deeply rooted in the financial strategy and goals of your organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several other factors to consider when evaluating cloud solutions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Cloud solutions offer significant flexibility.
With a cloud service, you can dynamically scale your resources up or down based on demand.
In contrast, with an on-premises data center, you have to invest in hardware capable of handling peak loads, which may not always be efficient.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Operational and Personnel Cost Savings:&lt;/strong&gt; Opting for a cloud service can lead to savings in operational and personnel costs associated with running and maintaining a local setup.
These expenses are typically absorbed by the cloud service provider.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Costs vs.
Skills:&lt;/strong&gt; Paying more for a cloud service than what it would cost to set up locally isn&amp;#8217;t necessarily a reflection of your luck or skill.
It does not mean you do it better than the cloud provider.
Your price includes the additional profit margin of the cloud provider.
They probably can also do it cheaper, just do not give it to you at that price.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Resource Sharing:&lt;/strong&gt; Cloud providers utilize virtual machines and containers configured to share resources among multiple clients.
This approach is generally more cost-effective than each client maintaining their own hardware.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Expertise and Shared Costs:&lt;/strong&gt; Cloud providers employ experts to develop, maintain, and operate their software.
The cost of this expertise is distributed across all clients, making it more economical than maintaining an in-house team, even with the option of hiring less expensive developers from regions like Eastern Europe or India.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Shared Facility Costs:&lt;/strong&gt; Costs related to facility location, cooling, and physical security are shared among all clients of the cloud provider, contributing to overall cost-effectiveness.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the cost of a cloud solution is unaffordable, and a cheaper alternative, still above the cost of the provider is available, both you and the cloud provider lose out.
It&amp;#8217;s a missed business opportunity for the provider, who chooses not to lower prices to capture this segment of the market, thereby maintaining higher profit margins from clients who can afford their services.
This situation can lead to a loss of economic welfare.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;5-can-i-get-it-cheaper&quot;&gt;5. Can I get it cheaper?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s important to remember that the publicly advertised price of cloud services is not always the final price you may pay.
The approach to pricing can differ significantly depending on whether you are an individual or a company.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As an individual seeking to purchase cloud services, you&amp;#8217;re likely to pay the listed price.
While you can request a discount, the response is typically a polite refusal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, the situation changes if you represent a company.
Many professionals, such as consultants, senior experts, or architects, work for organizations where negotiating prices is standard practice.
If you&amp;#8217;re involved in estimating costs for a cloud project within a large company, it would be unwise to base your calculations solely on the advertised prices.
Instead, engage directly with cloud providers.
They are often willing to assist and, depending on the size and stature of your company, might offer substantial discounts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, cloud providers have the most comprehensive understanding of their pricing structures.
It&amp;#8217;s beneficial to let them assist with the price calculations, as they can provide insights and options that you might not have considered.
This approach not only potentially reduces costs but also ensures that you&amp;#8217;re getting the most value out of your investment in their services.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;6-what-is-the-price&quot;&gt;6. What is the price?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After exploring how to evaluate pricing, the next step is understanding the actual cost of cloud services, which is not straightforward.
Unlike visiting a grocery store where you can simply look at price tags, the pricing structure of cloud services is composed of multiple components.
Typically, you might encounter initial setup costs, monthly fees, and various usage-based charges.
These usage fees can vary and are often categorized separately for network usage, storage, data transfer between locations, CPU usage, memory, and other resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The overwhelming complexity of cloud service pricing can be attributed to two main reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Firstly, there&amp;#8217;s a marketing strategy at play.
Cloud providers aim to present their prices as attractively low while simultaneously maximizing their revenue.
A complex pricing structure, offering various alternatives, often leads customers to choose options that aren&amp;#8217;t the most cost-effective for their needs.
This choice is influenced by a psychological desire for security; customers tend to opt for a pricing plan that offers a perceived safety net, based on their estimation of future resource usage.
However, this estimation is often an overestimation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, I personally pay $100 for a GSM mobile plan that includes unlimited calls, SMS, and data, plus 40GB of roaming data, which is shared with my wife on a second device.
In the past five years, I&amp;#8217;ve only exceeded this limit twice.
Offering a range of alternatives is an effective customer engagement tool, as it caters to different needs and perceived usage patterns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the early 2000s, Hungarian T-Mobile offered thousands of different pricing packages.
Customers couldn&amp;#8217;t choose from all these options at any given time, but once they selected a package, they could keep it indefinitely.
During my tenure there, we conducted a project to assess the marketing value of these packages.
We randomly selected 10,000 anonymized clients and calculated the potential revenue loss if we had offered them the cheapest package that would have met their needs.
The findings indicated that such a change would result in a 30% revenue loss.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concurrently, we surveyed 1,000 of these 10,000 clients, asking which package they would choose if they had the option to select from all available packages.
Surprisingly, the results showed that the potential revenue gain would be 30%.
This suggests that people often opt for a more expensive package because it offers a sense of security.
This tendency is also observable in the realm of cloud services, where customers frequently select higher-priced options for the perceived safety they offer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second reason for the complex pricing of cloud services is, on the other hand, quite rational.
The fundamental value proposition of cloud services lies in optimization.
Cloud providers continuously work on optimizing their infrastructure.
This ongoing process of optimization helps reduce their costs while still delivering the same value to their clients.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cloud providers, while adept at optimizing their infrastructure, cannot directly optimize your application.
If you manage to reduce your application&amp;#8217;s resource consumption by 10%, they are often willing to offer a discount on a portion of your bill.
You might not receive the full extent of the cost savings they achieve, but it still creates a win-win situation.
Their revenue might decrease slightly, but their profit margin can increase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the current phase where cloud providers are experiencing growth and attracting more clients, they are generally open to providing discounts if your optimizations help reduce their operational costs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nowadays, it&amp;#8217;s typically a wise decision to analyze and optimize your cloud usage.
While there might be some exceptional cases where this isn&amp;#8217;t necessary, generally speaking, it&amp;#8217;s a beneficial practice.
Optimizing cloud usage not only can lead to direct cost savings but also ensures more efficient use of resources, which is advantageous both financially and operationally.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;7-summary-and-takeaway&quot;&gt;7. Summary and Takeaway&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The cloud is an undeniable presence in today&amp;#8217;s technology landscape.
It&amp;#8217;s important to consider cloud solutions as an alternative to your on-premises setup.
This decision shouldn&amp;#8217;t be made blindly – as is the case with most decisions.
You need to carefully evaluate the costs and benefits, taking into account your specific situation, negotiating position, potential for optimization, and other relevant factors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(This article was republished by &lt;a href=&quot;https://dzone.com/articles/cloud-solutions-are-expensive-or-are-they&quot;&gt;DZONE&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">1. Introduction</summary></entry></feed>